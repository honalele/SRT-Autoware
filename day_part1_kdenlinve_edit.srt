1
00:00:02,515 --> 00:00:05,785
大家好，这里是Alexander Carballo

2
00:00:05,758 --> 00:00:11,197
一名来自日本名古屋大学的教授

3
00:00:11,204 --> 00:00:18,712
同时，我是也一家叫做TierIV的日本公司的研究员

4
00:00:18,718 --> 00:00:29,296
非常荣幸有机会向你们解说，Autoware在线培训课程

5
00:00:29,295 --> 00:00:36,835
为了准备这个在线课程，我们准备了很多有趣的资料

6
00:00:36,836 --> 00:00:41,141
这将会对您未来利用Autoware提供补充信息

7
00:00:41,141 --> 00:00:47,715
在这个需要动手实践的培训过程中，你们将会掌握关于怎样利用Autoware

8
00:00:47,714 --> 00:00:54,621
怎样建立模型（Prototyping）和怎样验证概念（PoC: Proof of Concept）

9
00:00:54,621 --> 00:01:05,532
本次的在线培训包含了6天的课程以及超过25小时的内容

10
00:01:05,532 --> 00:01:16,309
我将用英文进行对课程的讲解，而视频中也添加了中文字幕便于大家理解

11
00:01:16,309 --> 00:01:22,114
我们有逐步的操作演示视频

12
00:01:22,131 --> 00:01:29,305
你们可以一边观看我们提供的课程视频，一边在自己的环境进行实际操作

13
00:01:29,289 --> 00:01:33,927
请多次重复，直到你们掌握好每一个概念

14
00:01:33,927 --> 00:01:43,670
并且我们非常鼓励在自己的环境里重复练习我们在课程里介绍的的内容

15
00:01:43,670 --> 00:01:49,443
我们希望你们不仅能够掌握关于Autoware的知识

16
00:01:49,442 --> 00:01:55,448
还能掌握Autoware的一些背景知识

17
00:01:55,448 --> 00:01:59,852
还有关于自动驾驶车辆技术相关的知识

18
00:01:59,853 --> 00:02:04,491
我们会讲到Autoware的各个方面的相关知识循序渐进，

19
00:02:05,892 --> 00:02:12,231
还会介绍在实际的应用过程中我们的经验和具体的实战情况

20
00:02:12,232 --> 00:02:18,571
另外还会介绍怎样把代码部署到实际的车辆上

21
00:02:18,571 --> 00:02:25,645
如果你们完成了这个课程你们应该能够将Autoware部署在车辆上

22
00:02:25,645 --> 00:02:29,649
具体来说，这辆车应该被设置为自动驾驶的

23
00:02:29,649 --> 00:02:36,556
带一辆有通信装置，配有驾驶装置的电动车

24
00:02:36,556 --> 00:02:39,892
还能够与Autoware进行交互

25
00:02:39,893 --> 00:02:46,099
这里Autoware被当作一种进行验证概念（PoC: Proof of Concept）的工具

26
00:02:46,099 --> 00:02:50,703
也可以用于搭建模型（Prototyping），用来验证你们的商业想法

27
00:02:50,703 --> 00:02:55,363
也许用来最终生产自动驾驶系统还为时过早

28
00:02:55,375 --> 00:02:59,946
但是可以用来测试你们的技术,你们可以具体做一些

29
00:03:04,017 --> 00:03:11,257
比如校准传感器，或者用物体检测技术来构建3D地图，HD（高清）地图

30
00:03:11,257 --> 00:03:15,028
你们可以利用Autoware中已有的技术

31
00:03:15,895 --> 00:03:19,532
或者将其替换成你们自己的技术

32
00:03:20,166 --> 00:03:24,203
例如，深度学习手法

33
00:03:24,204 --> 00:03:28,364
你们也可以在驾驶模拟器中运行Autoware

34
00:03:28,508 --> 00:03:32,311
当然也可以在硬件中运行等等。

35
00:03:35,615 --> 00:03:38,935
本次培训将为您提供

36
00:03:38,952 --> 00:03:44,558
用于帮助你们自己去搭建Autoware系统所需的工具

37
00:03:45,692 --> 00:03:53,766
正如我之前提到的，这个课程的结构包含6天的课程

38
00:03:53,766 --> 00:03:56,436
第一天，也即是Day0

39
00:03:56,435 --> 00:04:01,407
是系统的概述，我们当然会介绍什么是Autoware

40
00:04:01,407 --> 00:04:05,477
Autoware可以用来做什么

41
00:04:05,478 --> 00:04:10,884
另外，我们会介绍一些重要的相关技术

42
00:04:12,785 --> 00:04:16,825
在Day1, 我们开始介绍具体的Autoware

43
00:04:16,823 --> 00:04:20,026
然后，我们会介绍怎样安装Autoware具体的操作方法

44
00:04:20,026 --> 00:04:28,801
我们还会介绍ROS以及如何配置ROS和安装Autoware

45
00:04:31,070 --> 00:04:40,213
并且，在Day1的第二个部分（Part2）我们会启动Autoware，具体的做一些基本操作

46
00:04:43,483 --> 00:04:47,954
正如我之前提到发的， 我们会逐步的向你们演示（操作方法）

47
00:04:48,288 --> 00:04:51,358
所以，请试着跟我们重复这些操作

48
00:04:51,457 --> 00:05:01,057
因为这是一个在线能够动手操作（hands on）的课程

49
00:05:01,860 --> 00:05:06,598
讲课的我，和你们之间，互动会很少

50
00:05:06,673 --> 00:05:13,079
所以，我们非常鼓励你们可以反复阅读,并重复操作

51
00:05:15,715 --> 00:05:19,005
如果你们不试图动手操作，只是去听课程的话

52
00:05:19,018 --> 00:05:25,658
想要去真正的掌握这里的技能就会变得比较难

53
00:05:27,293 --> 00:05:36,235
所以建议你们，在本次培训的过程中，同时也多加练习课程中演示的具体操作

54
00:05:38,838 --> 00:05:44,444
在Day2 的课里，我们会介绍一些关于SLAM，3D地图的问题

55
00:05:44,453 --> 00:05:48,124
自我定位（Localization）以及如何构建高清地图（HD Maps）

56
00:05:50,116 --> 00:05:53,920
以及这些技术的重用性，类型等

57
00:05:53,907 --> 00:05:56,977
我们还会介绍如何生成搜索地图

58
00:05:59,092 --> 00:06:03,396
在Day3的课里，我们会聚焦于物体识别和物体追踪问题

59
00:06:03,830 --> 00:06:08,034
我们会介绍每一项技术的基础知识

60
00:06:08,050 --> 00:06:13,321
例如物体识别，物体追踪的不同手法

61
00:06:13,306 --> 00:06:18,010
我们会讲到在Autoware里有哪些具体的方法

62
00:06:17,994 --> 00:06:21,631
基于camera或lidar的，以及融合（Fusion）的技术

63
00:06:21,981 --> 00:06:25,084
还比如关于物体追踪，我们会介绍不同的追踪方法

64
00:06:25,077 --> 00:06:29,014
甚至会讲到识别信号灯的方法

65
00:06:29,021 --> 00:06:34,160
在Day4，我们会介绍路径生成，具体来说，

66
00:06:34,160 --> 00:06:38,898
就是怎样生成一条车辆可以从头到尾移动行驶的路径

67
00:06:38,898 --> 00:06:41,968
从开始一直到目标地

68
00:06:42,635 --> 00:06:47,273
在最后一天（Day5），我们将会讨论决策的主题

69
00:06:47,900 --> 00:06:52,738
还有，驾驶模拟器和Autoware的未来发展

70
00:06:54,180 --> 00:07:02,355
我希望本次课程中不仅有有趣的内容

71
00:07:02,370 --> 00:07:10,144
能让大家通过动手去练习操作演示

72
00:07:10,496 --> 00:07:15,435
最后让你们可以自己动手完成自己的项目

73
00:07:15,768 --> 00:07:22,942
正如我之前提到的， 如果这与动手实践相结合

74
00:07:22,942 --> 00:07:27,547
你们对技术的理解会更扎实

75
00:07:27,547 --> 00:07:30,837
为了能够达到部署这项技术的目的

76
00:07:30,860 --> 00:07:36,398
以及在你们的未来，能够更好的为你们的公司服务

77
00:07:38,224 --> 00:07:43,830
让我们开始吧，本次讲座的第一部分内容

78
00:07:44,263 --> 00:07:47,300
自动驾驶车辆的简介

79
00:07:52,805 --> 00:07:57,343
今天的内容包括自动驾驶的等级区别

80
00:07:58,044 --> 00:08:00,880
自动驾驶对社会的影响

81
00:08:01,380 --> 00:08:05,685
市场的趋势，以及开源自动驾驶技术的讨论

82
00:08:05,684 --> 00:08:08,821
还会介绍关于自动驾驶的安全保障

83
00:08:08,832 --> 00:08:13,804
我们一直在做什么（来保障自动驾驶的安全）

84
00:08:14,665 --> 00:08:18,602
和驾驶中的一些实际考虑

85
00:08:19,710 --> 00:08:25,482
这些年，我们的社会已经逐渐发展为大家都会驾车出行的状态

86
00:08:25,573 --> 00:08:31,512
这里就会让我们联想到一个近几年的关键字 CASE

87
00:08:31,511 --> 00:08:33,501
CASE里的C来自Connected(连接)

88
00:08:33,513 --> 00:08:37,717
Automated(自动化), Sharing&Service(共享和服务), Electric Drive(电动)

89
00:08:38,317 --> 00:08:45,925
这是目前被认为，社会需要的关键组成部分

90
00:08:47,093 --> 00:08:50,763
对于什么是超级社会所需的关键组成部分

91
00:08:50,763 --> 00:08:53,432
首先，一切都是相连的（Connected）

92
00:08:53,432 --> 00:08:57,136
现在无论人们移动哪里，都会随身带着智能手机。

93
00:08:57,136 --> 00:09:01,007
通过取得你所在位置的信息，你就可以开发一些基于地理位置的服务

94
00:09:01,007 --> 00:09:07,113
用你可以去自动售货机，你的智能手机，只是扫描一些二维码

95
00:09:07,246 --> 00:09:17,256
或者通过一些应用软件，你就可以购买饮料，或者食物等等

96
00:09:19,710 --> 00:09:25,148
可以随时随地获取信息，就在你当前所处的位置

97
00:09:25,166 --> 00:09:34,108
你就可以获取天气预报预测，或者下一辆巴士或者电车到达的情况

98
00:09:34,100 --> 00:09:40,439
如果您始终处于连接的状态，那么在移动的汽车里也处于连接的状态

99
00:09:41,013 --> 00:09:46,252
自动化（Automated），这个想法来源于简化体力劳动

100
00:09:47,730 --> 00:09:58,174
某些等级的自动化，例如，为了让您快速解决一些需求

101
00:10:00,600 --> 00:10:07,106
在无需人为干涉的情况下就可以达到目的

102
00:10:07,106 --> 00:10:13,546
所以你家的电器也是一种自动化服务

103
00:10:13,779 --> 00:10:17,516
还比如，车辆是作为一种出行服务，还有一些护理功能的服务等等

104
00:10:17,984 --> 00:10:22,321
基本上，拥有这项技术可能成本会很高

105
00:10:22,737 --> 00:10:27,942
所以，人们想出了共享（Sharing）的方法，比如你想骑着一辆自行车去工作

106
00:10:29,710 --> 00:10:33,150
可是这里有一个问题就是，你必须随身携带自行车

107
00:10:33,150 --> 00:10:37,587
比如你从家里出发，骑车到了车站，你得把自行车带到电车上

108
00:10:37,616 --> 00:10:44,090
然后当你下电车的时候你还得将自行车带下车，然后骑行一段时间之后，你可能还需要再去搭乘其他的交通工具

109
00:10:44,090 --> 00:10:49,970
所以，通过共享单车的方法，你就可以简化这个过程

110
00:10:49,970 --> 00:10:53,460
你从自己的家里出发时，骑一辆单车

111
00:10:54,628 --> 00:10:59,000
到第一站，然后去乘坐电车，下了电车，你再去找一辆共享单车

112
00:10:59,000 --> 00:11:05,050
一直到你的需要下次乘坐其他交通工具的地方

113
00:11:05,050 --> 00:11:09,440
找出最近的共享单车，只需使用它，然后去下一站，你就可以放下这台单车

114
00:11:11,930 --> 00:11:15,950
你就可以继续其他搭乘交通工具，这并不新鲜，这些年我们已经可以常常看到这种应用

115
00:11:19,070 --> 00:11:23,607
社会也普遍接受这种服务认为是一种非常方便的服务

116
00:11:26,590 --> 00:11:33,100
所以，对于汽车而言，我们也有同样的情况现在很难拥有一辆自动驾驶汽车

117
00:11:36,395 --> 00:11:40,505
因为它们并不便宜甚至是相当昂贵的

118
00:11:43,020 --> 00:11:47,710
因为还包括传感器，处理器，通信设备等等

119
00:11:47,710 --> 00:11:54,280
所以说，个人想要拥有一辆自动驾驶的车辆，仍然并不现实

120
00:11:58,490 --> 00:12:02,380
但是共享汽车却可以帮助我们利用移动服务

121
00:12:04,570 --> 00:12:07,800
最后，我们希望能够早实现的社会目的还有减排（减少废气排放）和尽量减少生态指纹

122
00:12:18,220 --> 00:12:25,390
通过拥有这样的自动化设备，在我们周围的车辆中，我们可以尽快达到这一点

123
00:12:25,384 --> 00:12:30,489
有些内容我们不会在这个课程里讨论到，

124
00:12:32,110 --> 00:12:39,320
例如，目前用于自动驾驶车辆，单车，或者

125
00:12:39,320 --> 00:12:44,491
摩托车上面的电池，目前基于锂的电池产业链业务中

126
00:12:44,490 --> 00:12:51,830
有一些可能对环境不是最友好的，但我们不打算在这里讨论这个话题

127
00:12:51,850 --> 00:12:55,580
重要的是我们我们能达成这样的共识

128
00:13:00,750 --> 00:13:04,650
我们致力于一个最终能减少二氧化碳排放和环境污染的领域，这将会是我们为这个社会提出最好的方案

129
00:13:11,860 --> 00:13:16,310
这点是我们都有所共识的

130
00:13:16,310 --> 00:13:19,800
这张图不是最新的图，

131
00:13:22,880 --> 00:13:29,760
图里的是2017年的一辆自动驾驶车辆，这辆车配备了大量传感器

132
00:13:29,760 --> 00:13:33,230
和一些昂贵的设置，这些装置对于车辆取得现实世界的信息，是非常重要的

133
00:13:33,257 --> 00:13:38,730
所以我们可以理解为

134
00:13:38,730 --> 00:13:44,280
自动驾驶车辆是一种像机器人的车辆

135
00:13:47,050 --> 00:13:51,160
因为它需要预测，感知和理解周围的世界

136
00:13:53,500 --> 00:13:58,840
我们理解自动驾驶需要独立完成导航

137
00:13:58,840 --> 00:14:04,812
在整个驾驶过程中都可以自动完成行驶

138
00:14:04,810 --> 00:14:09,481
所以自动驾驶车辆，和任何类型的其他车辆一样

139
00:14:10,620 --> 00:14:15,810
只是这种车辆，装备了传感器，和计算设备，变成了自动驾驶车辆

140
00:14:15,810 --> 00:14:21,140
不可否认，自动驾驶车辆看起来有些笨重

141
00:14:23,160 --> 00:14:27,870
因为需要在车上，配置多个传感器

142
00:14:31,920 --> 00:14:38,520
最近，这个图里是去年，自动驾驶车辆，进化到了极致的自动驾驶

143
00:14:38,520 --> 00:14:44,659
自动驾驶车辆，进化到了极致的自动驾驶，自动驾驶车辆，现在可以行驶每小时300公里。

144
00:14:45,820 --> 00:14:50,710
这是目前许多研究中心的现状

145
00:14:53,325 --> 00:14:56,775
当然，这是（目前）一些赛车方程式的现状

146
00:14:58,063 --> 00:15:00,813
图里是一辆一级方程式自动驾驶汽车

147
00:15:02,520 --> 00:15:07,791
耗资超过100万美元，上面配有多个传感器

148
00:15:10,380 --> 00:15:16,520
这个是去年十月，在Indy Autonomous Challenge期间的图片

149
00:15:16,526 --> 00:15:20,330
这台有类似的功能

150
00:15:20,330 --> 00:15:23,700
在导航的过程中，能够自动的接收信息

151
00:15:23,700 --> 00:15:27,940
并在能够在有限的条件下，理解周围环境

152
00:15:27,940 --> 00:15:33,780
当然这并不是普通的车辆

153
00:15:33,780 --> 00:15:40,086
现在图片中的是，同一次比赛的另一团队所拥有的比赛用车

154
00:15:41,440 --> 00:15:47,020
比如图片中的这台我没有在图片中标记或者强调出这辆车的配置

155
00:15:47,015 --> 00:15:51,520
但你们可以看到，在这台车上，有几个传感器

156
00:15:51,520 --> 00:15:57,092
比如lidar(激光雷达)，camera(相机)，还有其他的多种配置的radar(雷达)

157
00:16:04,580 --> 00:16:10,370
Wi-Fi连接，还有多台地理位置GNSS的接收器

158
00:16:15,380 --> 00:16:25,850
还有基于基站（base station）的矫正器

159
00:16:30,180 --> 00:16:35,230
接下来我们会有几个视频，演示是怎样使得整个系统在无人驾驶的情况下运行

160
00:16:35,230 --> 00:16:42,637
为了让你们更方便的了解信息，我想在视频里应该导入了音频

161
00:16:43,827 --> 00:16:49,600
让我按下播放键，来看其中的第一个视频

162
00:16:57,120 --> 00:17:03,650
（视频里的声音）

163
00:17:22,470 --> 00:17:24,618
你们可以看到这里有一台车在跑，有很多车有些问题

164
00:17:24,607 --> 00:17:30,580
比如它们不能正常行驶，这台车会在撞到墙上，这里

165
00:17:31,917 --> 00:17:36,467
这里又一次撞上了

166
00:17:41,820 --> 00:17:44,990
它们要输了，它们在失去继续导航的可能性

167
00:17:44,990 --> 00:17:48,770
这辆车是来自慕尼黑工业大学的车

168
00:17:52,330 --> 00:17:58,135
它们能够正常运行，并且最终赢得了这次挑战赛

169
00:18:00,470 --> 00:18:07,130


170
00:18:08,220 --> 00:18:11,370
它们达到了所有的标准，以最快的速度我认为他们甚至达到了最高速度

171
00:18:11,370 --> 00:18:16,440
在某些位置，速度达到了每小时250公里

172
00:18:19,050 --> 00:18:22,820
许多团队都遇到了传感器问题自我定位功能的性能问题，和一些算法当中有错误的问题。

173
00:18:22,848 --> 00:18:27,420


174
00:18:28,210 --> 00:18:32,680
但是，他们仍然做到了

175
00:18:32,680 --> 00:18:37,940
在这么困难的任务中完成了自动驾驶，并且实现了高速的自动驾驶

176
00:18:39,890 --> 00:18:42,850
另外，在这场比赛当中还发生了一件事

177
00:18:44,610 --> 00:18:47,900
刚开始，他们想把所有的车都放在一起，就像一级方程式赛车一起比赛

178
00:18:51,000 --> 00:18:55,330
从同一点同时出发，一起比赛，然而，这样非常困难。

179
00:18:57,800 --> 00:18:59,601
没有一个团队能做到这些

180
00:19:00,540 --> 00:19:05,150
我想是因为主办方事先进行过一些测试

181
00:19:06,080 --> 00:19:08,430
不过最终，主办方决定不那样做

182
00:19:08,430 --> 00:19:13,780
这里还有许多的遗留待解决的问题

183
00:19:13,780 --> 00:19:15,720
例如，如何在有障碍物的情况下导航

184
00:19:15,720 --> 00:19:21,430
有真正的障碍物并且在高速驾驶的环境里

185
00:19:21,430 --> 00:19:22,960
为什么这很重要？因为如果你能够解决这个至关重要的难题

186
00:19:22,960 --> 00:19:28,380


187
00:19:29,250 --> 00:19:33,830
如何在非常高速的情况下，持续导航

188
00:19:33,830 --> 00:19:38,590
那么应该也可以把这些技术用更加简单的方法扩展到普通车上。

189
00:19:38,590 --> 00:19:45,797


190
00:19:45,770 --> 00:20:10,227
最后，这个来自同一慕尼黑工业大学的实验室，你们可以看一下

191
00:20:13,170 --> 00:20:16,940
当然，这些家伙不完全遵循CASE的范例

192
00:20:16,960 --> 00:20:19,230
因为这些车不是电动的，为了能够非常快速的驾驶，他们需要巨大的马力

193
00:20:19,230 --> 00:20:22,650


194
00:20:22,650 --> 00:20:25,310


195
00:20:25,310 --> 00:20:29,213
它们不是电动车它们是汽油车

196
00:20:30,310 --> 00:20:33,710
因为这些是一级方程式式的赛车

197
00:20:33,710 --> 00:20:36,846


198
00:20:37,530 --> 00:20:41,066
正在试着在没有驾驶员，没有人驾驶的情况配置了很多电脑和很多传感器

199
00:20:41,060 --> 00:20:46,840
但这仍然非常了不起，他们取得了非常显著的进步

200
00:20:49,650 --> 00:20:56,450
我们看到了自动驾驶， 在极端条件下各种不同方面的尝试

201
00:20:59,200 --> 00:21:01,670
如果我们解决了这些极端条件下的问题

202
00:21:03,940 --> 00:21:07,520
那我们就可以在正常的条件下，实施这些解决方案

203
00:21:09,850 --> 00:21:14,680
应该也会更加简单，并且会带来很多积极的影响

204
00:21:14,680 --> 00:21:17,710
好的，现在我们来介绍一下自动驾驶的几个等级

205
00:21:17,710 --> 00:21:24,516
这个等级，是由美国汽车工程师学会（SAE）几年前提出的

206
00:21:32,576 --> 00:21:42,620
他们将自动化的程度进行定义和分类，分成了六个等级

207
00:21:55,130 --> 00:22:02,050
包括等级0等级0就是毫无自动化。所有事情有驾驶员来决定

208
00:22:07,561 --> 00:22:12,900
那么，等级1从大约2000年开始，系统引进了巡航控制功能

209
00:22:16,378 --> 00:22:21,550
那么什么是巡航控制呢，是速度由驾驶员控制（的系统）

210
00:22:21,550 --> 00:22:26,360
你可能会获得一些辅助功能。例如，系统可以保持某个特定的速度

211
00:22:36,610 --> 00:22:43,410
等级2，就是特斯拉所说的他们的方法，则是部分自动化

212
00:22:43,410 --> 00:22:45,290


213
00:22:45,290 --> 00:22:47,810
那么部分自动化，其实基本上就是巡航控制(Cruise Control)，

214
00:22:49,690 --> 00:22:52,060


215
00:22:52,060 --> 00:22:55,130
加上车道保持(Lane keeping)系统

216
00:22:55,130 --> 00:22:59,130


217
00:23:00,470 --> 00:23:03,820
在车道上根据障碍物的位置，以一定的概率来调整车辆的速度。

218
00:23:03,820 --> 00:23:06,820
等级3则是有条件的自动化，在这个等级，（系统）可以接受人为干预

219
00:23:06,820 --> 00:23:09,680


220
00:23:09,680 --> 00:23:14,520
（比起等级2的部分自动化，干预的手变少了

221
00:23:16,890 --> 00:23:19,850
仍然需要驾驶员，驾驶员必须在车里，但并不完全有必要一直如此

222
00:23:27,420 --> 00:23:31,390
车辆可以接管一部分的驾驶员的功能

223
00:23:32,540 --> 00:23:36,400
例如，先进的驾驶辅助系统ADAS(Advanced Driving Assistance Systems)

224
00:23:36,400 --> 00:23:39,800
有避开障碍物，有自动泊车等功能

225
00:23:44,460 --> 00:23:47,060
等级4，也就是高度自动化，也是目前大部分自动驾驶追求的目标

226
00:23:49,190 --> 00:23:53,980
很多公司声称，自家的自动驾驶都在某一种程度上达到了这个等级

227
00:23:58,770 --> 00:24:02,700
大家都在探索如何能达到这个等级

228
00:24:02,700 --> 00:24:05,000
也许当前还没有完全达到这个等级，但在某些场景里实现了这个等级

229
00:24:09,770 --> 00:24:12,320
等级4，不需要驾驶员了。实际上，甚至不需要有方向盘

230
00:24:13,110 --> 00:24:15,770


231
00:24:15,770 --> 00:24:19,910
在这个等级，车辆需要能够完成所有的操作。一切都是自动化的

232
00:24:19,910 --> 00:24:23,710


233
00:24:23,710 --> 00:24:30,010
但是在极端条件下，或者在一些没有考虑到的情况下司机仍然有责任对该车辆进行认为干预

234
00:24:30,010 --> 00:24:32,900


235
00:24:38,110 --> 00:24:41,260
即使车里没有方向盘，但是系统需要提供一些机制来操作系统的方向

236
00:24:41,260 --> 00:24:43,520


237
00:24:46,810 --> 00:24:52,840
比如用一个操纵杆（joystick）或者司机能够踩刹车

238
00:24:56,870 --> 00:25:05,078
或者可以通过用户界面，于车辆系统进行交互并控制汽车

239
00:25:05,820 --> 00:25:09,410
重要的是在等级4，在一定的约束条件下是可以无人驾驶，这些限制条件有明确定义

240
00:25:13,310 --> 00:25:16,150


241
00:25:17,410 --> 00:25:20,090
即被称为ODD，操作定义域(Operational Define Domain)

242
00:25:25,070 --> 00:25:27,830
这些车的某些特定功能是设计用于在该特定区域运行，所以，你定义了汽车可以行驶的边界。

243
00:25:27,830 --> 00:25:31,490


244
00:25:33,130 --> 00:25:40,160
如果你跨越了指定的边界，该车必须依法转向手动驾驶

245
00:25:40,160 --> 00:25:42,440
因为这个功能没有通过被定义之外的条件测试

246
00:25:44,210 --> 00:25:47,060
边界条件可以是比如，具体的地图，导航所需要的地图

247
00:25:48,100 --> 00:25:50,170


248
00:25:50,170 --> 00:25:53,360
如果车辆行驶预设地图之外的地区，因为导航没有足够的信息，会导致系统不正常。

249
00:25:55,830 --> 00:26:04,190


250
00:26:04,190 --> 00:26:06,540
用于设置功能的边界之一有地理围栏，还有天气条件。

251
00:26:06,540 --> 00:26:08,640


252
00:26:11,420 --> 00:26:16,750
比如，（功能被定义在）这辆车只能在晴朗的天气条件下工作不可以在其他天气条件写行驶

253
00:26:17,800 --> 00:26:21,130
所以如果今天有小雨，或季节来到冬天，这个功能使得车辆必须停下

254
00:26:24,190 --> 00:26:26,380


255
00:26:26,380 --> 00:26:29,340
因为系统不会，也没有被配置为可以在雪天行驶。

256
00:26:29,340 --> 00:26:34,770
所以，这些等级4的车辆，包含不同的限制

257
00:26:36,148 --> 00:26:40,920
等级5，完全自动驾驶代表的是车辆已经不在需要驾驶员。

258
00:26:40,920 --> 00:26:44,120


259
00:26:44,120 --> 00:26:48,630
我忘记说一件事了，在等级4，在某些情况下，法律要求车辆可以被远程控制

260
00:26:49,840 --> 00:26:54,780


261
00:26:54,780 --> 00:26:58,860
由专门的（远程）操作员进行检查和控制，远程操作员有权查看汽车

262
00:27:00,790 --> 00:27:05,880


263
00:27:05,880 --> 00:27:08,380
尤其是对那些共享汽车，如果发生一些危险情况

264
00:27:09,940 --> 00:27:13,100
那么远程控制的操作员，将需要接管车辆控制，接管驾驶并远程的控制车辆行为

265
00:27:13,100 --> 00:27:15,180


266
00:27:15,180 --> 00:27:20,740
一些没有驾驶员和乘客的车辆或者运输货物的车辆，比如，一些物流用车

267
00:27:20,740 --> 00:27:23,390


268
00:27:24,629 --> 00:27:28,400


269
00:27:28,920 --> 00:27:32,310


270
00:27:32,310 --> 00:27:34,590
在一些限制好的ODD里，还是有可能发生一些情况，需要人为进行远程干预

271
00:27:35,320 --> 00:27:39,290
这个也是等级4的一个条件。

272
00:27:42,230 --> 00:27:45,620
OK, 在等级5驾驶行为不再需要任何驾驶员

273
00:27:45,620 --> 00:27:47,770
不需要远程控制完全不需要人为控制，车辆可以完全的自动驾驶

274
00:27:49,640 --> 00:27:54,420


275
00:27:54,420 --> 00:28:03,220
在任何的天气，任何时间，和任何条件下

276
00:28:03,220 --> 00:28:05,800
所以你买的同一辆车，不管是在美国，或中国，或日本

277
00:28:11,600 --> 00:28:15,060


278
00:28:15,060 --> 00:28:23,730
这辆车可以在印度甚至哥斯达黎加，也就是我的国家，或者其他什么地方行驶

279
00:28:29,140 --> 00:28:30,890
即使车辆没有环境的地图，目的地

280
00:28:30,875 --> 00:28:35,080
有一些人可能会说（在这个等级）即使车辆受到一些物理伤害

281
00:28:35,080 --> 00:28:39,540


282
00:28:39,540 --> 00:28:45,880
就像爆胎等，车辆需要想办法修复系统

283
00:28:45,880 --> 00:28:48,860
所以完全自动化的车辆能够处理的一切，这是等级5的目标。

284
00:29:03,100 --> 00:29:07,760
在等级4的时候我们也尝试提供一些附加的信息

285
00:29:07,746 --> 00:29:10,496
去了解驾驶环境，比如在环境中安装传感器，不是在车辆内部，而是从外部环境取得信息

286
00:29:12,530 --> 00:29:14,220


287
00:29:14,220 --> 00:29:18,040
比如十字路口，或者建筑物的顶部等地方，给无人车提供更多的附加信息，使其能做决策

288
00:29:18,040 --> 00:29:21,460


289
00:29:21,940 --> 00:29:23,330


290
00:29:24,040 --> 00:29:25,850
例如，你正处于交通堵塞状态，在这种情况下，你会看不到远处的车辆

291
00:29:25,850 --> 00:29:30,410


292
00:29:34,820 --> 00:29:38,630
也许可以利用外部环境传感器获取更多的信息

293
00:29:40,240 --> 00:29:42,960
比如，你前方有多少车辆，或者发生了什么特殊的情况

294
00:29:42,960 --> 00:29:44,980


295
00:29:48,090 --> 00:29:50,950
这样你的自动驾驶汽车就可以做正确的决定

296
00:29:50,950 --> 00:29:52,930
我们人类不会那样开车，因为我们没有其他附加的判断信息

297
00:29:54,320 --> 00:29:58,920


298
00:30:01,270 --> 00:30:03,480
我们没有外部世界的传感器信息

299
00:30:03,480 --> 00:30:06,250
所以我们必须运用我们的直觉我们的眼睛和别的传感器，用来驾驶汽车

300
00:30:12,650 --> 00:30:16,870
所以在等级5也是如此，一切都可以在车辆中完成

301
00:30:17,600 --> 00:30:23,120
当然，要达到全部的这些，需要时间

302
00:30:23,120 --> 00:30:27,890
正如我们前面谈到的，在等级2， 驾驶员可以hands off（离开方向盘）

303
00:30:29,380 --> 00:30:32,600
可以做一些基本的巡航控制，一些有限制条件的车道保持

304
00:30:32,600 --> 00:30:36,130


305
00:30:38,190 --> 00:30:42,270
所以特斯拉声称他们的自动驾驶功能（AutotoPilot）是合格的

306
00:30:43,320 --> 00:30:53,890
虽然特斯拉也许有一些引人关注的事情，和事故，

307
00:30:53,890 --> 00:30:58,980
但目前特斯拉仍然是在实现这一等级的自动驾驶方面最著名的公司之一

308
00:30:58,980 --> 00:31:01,860


309
00:31:01,860 --> 00:31:08,250
现在大家看到的是一台凯迪拉克汽车，驾驶员可以驾驶这台车

310
00:31:08,250 --> 00:31:13,220


311
00:31:14,380 --> 00:31:17,010
而且，在某些时刻就比如要驶入高速公路时

312
00:31:19,050 --> 00:31:22,100
当条件满足然后你可以使用主动巡行车速控制功能

313
00:31:22,100 --> 00:31:27,140


314
00:31:27,140 --> 00:31:31,690
这样您的车辆就可以在某个固定的车速条件下持续驾驶，这样您就可以放松了

315
00:31:33,590 --> 00:31:35,260


316
00:31:35,260 --> 00:31:38,220
无需继续驾驶，因为车辆会在同一车道上继续自动行驶

317
00:31:41,290 --> 00:31:47,640


318
00:31:47,640 --> 00:31:54,870
还有当车辆感知到一些危险的情况，系统会警告存在一些危险，这样驾驶员就需要接管

319
00:31:56,110 --> 00:31:57,550


320
00:31:57,550 --> 00:32:00,320
你需要保持注意，比如当你看到那里闪烁的警告灯，你需要注意安全驾驶

321
00:32:02,320 --> 00:32:07,520
所以在这种情况下，你不能完全放松

322
00:32:07,520 --> 00:32:14,660
这个等级2，有一些难点，因为等级2需要驾驶员了解现在此刻在发生什么

323
00:32:16,410 --> 00:32:21,270
可以有一段时间即使驾驶员不再使用方向盘和离合器

324
00:32:22,890 --> 00:32:25,820
但问题是人类会过度信任技术

325
00:32:27,900 --> 00:32:30,110
导致当危险发生时对接管系统反应不过来

326
00:32:32,600 --> 00:32:36,470
所以等级2是自动驾驶技术发展的过度阶段

327
00:32:37,320 --> 00:32:43,580
对于等级3来说，也同样有这种危险的情况，因为你必须在适当的时间对系统进行干预

328
00:32:43,580 --> 00:32:49,430


329
00:32:49,430 --> 00:32:52,800
等级3，目前奥迪和本田声称已经达到这个等级，他们可以为驾驶系统提供自动导航选项

330
00:32:55,610 --> 00:32:59,220


331
00:32:59,217 --> 00:33:02,120


332
00:33:02,120 --> 00:33:05,280
并且可以躲避障碍物，等级3有一个重要标志就是能够避开障碍物

333
00:33:08,260 --> 00:33:12,080
并且能完成等级2的所有功能，以及可以处理障碍物

334
00:33:12,080 --> 00:33:14,810


335
00:33:15,980 --> 00:33:18,590
比如，奥迪有这个户外遥控停车场，你只需按下一个按钮

336
00:33:18,590 --> 00:33:22,010


337
00:33:22,010 --> 00:33:28,530
车可以进自动停车，你可以简单的理解为

338
00:33:28,530 --> 00:33:31,190
当你到达某地之后，下车按下智能手机服务中的按钮

339
00:33:31,190 --> 00:33:35,160


340
00:33:35,160 --> 00:33:38,130
车辆就会通过自动行驶，在复杂的环境，寻找最优路径，开始导航

341
00:33:38,130 --> 00:33:44,020


342
00:33:44,420 --> 00:33:49,230
然后，找到准确的停车位，完成自动停车

343
00:33:57,820 --> 00:34:02,480
这是另一个地方，这一台奥迪车，可以自动停车

344
00:34:05,860 --> 00:34:10,770


345
00:34:19,540 --> 00:34:24,540
现在我们看到的本田

346
00:34:24,540 --> 00:34:28,040
本田也是第一家开始销售，达到等级3的汽车的公司

347
00:34:28,040 --> 00:34:32,340


348
00:34:50,254 --> 00:34:53,291
（当ACC/LKAS功能在高速公路被激活）

349
00:34:54,125 --> 00:34:57,361
（不需要手握方向盘的功能则被启动）

350
00:34:59,897 --> 00:35:04,535
（当“不需要手握方向盘也可变换车道”功能被启动）

351
00:35:06,404 --> 00:35:11,042
（当与前方车辆距离较近）

352
00:35:11,976 --> 00:35:16,514
（系统确认周围车辆并进行变道） 
（声音：车辆将向右边进行变道）

353
00:35:20,885 --> 00:35:25,656
（当确认完周围车辆为安全，车辆将打转向灯并进行变道） 
你可以在视频中看到

354
00:35:26,071 --> 00:35:27,440
车辆能够看到道路中的障碍物

355
00:35:27,440 --> 00:35:29,780
并且在高速公路上，然后向用户推荐换车道并开始自动转换车道

356
00:35:30,430 --> 00:35:37,260
所以它有巡行车速控制和车道保持控制功能，

357
00:35:38,100 --> 00:35:43,860
并且，它可以自动转换车道，为了躲避障碍物

358
00:35:43,860 --> 00:35:46,810
系统要求，至少一位驾驶员要监管环境是否畅通

359
00:35:56,510 --> 00:36:01,290
当然，为了能够避免事故，汽车上有传感器可以获取周围的信息

360
00:36:01,290 --> 00:36:04,140
但是，以防万一，车辆仍然要确认右边是否有其他车辆

361
00:36:06,020 --> 00:36:08,790
这里重要的是，无论如何汽车里的人需要

362
00:36:15,740 --> 00:36:20,310
汽车里的人需要关注驾驶环境，以防止发生危险情况

363
00:36:25,310 --> 00:36:30,310
（系统的通知声：请确认左边车道，现在开始转换车道）

364
00:36:45,770 --> 00:36:49,190
所以，当车辆想要转换回原来的车道，也同样需要保持注意

365
00:36:49,830 --> 00:36:51,200


366
00:36:52,920 --> 00:37:00,850
请确保转换到左边的车道时安全

367
00:37:00,850 --> 00:37:05,960
所以当你购买这一类汽车时，需要在使用这些功能前接受培训

368
00:37:06,730 --> 00:37:08,750


369
00:37:10,440 --> 00:37:12,310
需要明白在这些功能启动时，车辆需要你做什么，在什么情况一定要进行接管

370
00:37:12,310 --> 00:37:15,410


371
00:37:15,410 --> 00:37:19,370
接下来我们要下一个演示视频，这次也是等级3的自动驾驶车辆，在交通堵塞情况下的情况

372
00:37:19,370 --> 00:37:24,610


373
00:37:24,610 --> 00:37:26,970
也就是堵车的情况（时的自动驾驶），让我们去看一下吧

374
00:37:26,970 --> 00:37:31,840


375
00:38:36,840 --> 00:38:42,200
（视频里的音乐声）

376
00:38:42,200 --> 00:38:44,860
正如你们在视频案例中的看到的，这辆车能检测到当前的交通情况，交通拥堵

377
00:38:44,860 --> 00:38:49,750


378
00:38:55,790 --> 00:38:59,190
这个技术是通过检测自己前方两个方向，和后方的车，当交通拥堵的时候，这些车的行驶速度会变慢

379
00:39:01,000 --> 00:39:04,900


380
00:39:04,900 --> 00:39:07,360
因为堵车可能需要一些时间，甚至可能会很长时间，

381
00:39:09,820 --> 00:39:13,450
这时系统可以播放一些能够让人感到轻松的音乐或者视频，让驾驶员可以享受这个过程

382
00:39:13,450 --> 00:39:15,040


383
00:39:15,040 --> 00:39:23,200
当交通拥堵的情况结束的时候，由于很难预测其他车辆的行为轨迹，是否还在堵车这个情况很难确定

384
00:39:26,340 --> 00:39:28,190


385
00:39:28,190 --> 00:39:31,700
所以系统会想让用户进行接管，来判断当前的情况是否还在堵车

386
00:39:31,700 --> 00:39:34,180
系统会向用户提出接管要求，使得驾驶员手动驾驶（解除自动驾驶模式）

387
00:39:37,860 --> 00:39:41,320
驾驶员接管了驾驶之后，当又满足自动驾驶条件时车辆又回返回自动驾驶模式

388
00:39:41,320 --> 00:39:47,430


389
00:39:47,430 --> 00:39:50,600
这就是等级3里的功能定义

390
00:39:50,600 --> 00:39:53,410
等级3里，车辆会持续地与驾驶员和车辆之间交互

391
00:39:54,340 --> 00:39:56,100
与等级2情况类似，驾驶员不可过度信任（自动驾驶）系统

392
00:39:57,100 --> 00:40:00,480
人们倾向于过度信任（依赖）系统，这是一个问题

393
00:40:05,310 --> 00:40:07,490
人们会认为（自动驾驶）系统会为我们完成所有的操作，这样会导致驾驶员在驾车时分心

394
00:40:07,490 --> 00:40:09,150


395
00:40:09,760 --> 00:40:11,890
当然，获得自动驾驶的驾驶服务非常重要，因为我们人类驾驶时会感到疲倦

396
00:40:11,890 --> 00:40:14,170


397
00:40:14,170 --> 00:40:17,910
我们人类有时不太适合驾驶，有时因为人类驾驶，我们会发生交通事故

398
00:40:19,770 --> 00:40:22,300


399
00:40:22,300 --> 00:40:25,140
但我们必须对驾车时发生的情况负责

400
00:40:25,140 --> 00:40:28,140
试着去理解系统到底能做什么和正在处于什么状态

401
00:40:28,990 --> 00:40:33,150
驾驶员需要保持注意，不能完全放松或睡觉

402
00:40:35,790 --> 00:40:40,330
这些是在等级3，我们尚未解决的问题

403
00:40:40,330 --> 00:40:42,160
我们正在做的事情（自动驾驶）的梦想是，实现等级4和等级5

404
00:40:45,160 --> 00:40:48,270
等级4的定义，有某些约束，如在某些地理范围（Geo-fenced）内

405
00:40:49,740 --> 00:40:54,200
或者一些限制，如定义在某一个ODD里可以运行的功能

406
00:40:54,200 --> 00:40:59,600
等级5的系统，又比等级4进步了一些，可以在任何条件下完成自动驾驶

407
00:40:59,600 --> 00:41:01,550


408
00:41:04,100 --> 00:41:08,100
所以是无条件的自动驾驶。许多公司都在致力于达到这个等级

409
00:41:08,100 --> 00:41:10,590


410
00:41:10,590 --> 00:41:13,610
其中一些已经失败了，他们中的一些公司已经停止了这一等级的研发

411
00:41:13,610 --> 00:41:15,770


412
00:41:15,770 --> 00:41:19,660
比如，之前Uber做了很多关于等级4的研究和演示

413
00:41:19,660 --> 00:41:21,860
并且宣称一定要达到这个等级，然而出于一些原因，已经决定停止这些研究开发

414
00:41:21,860 --> 00:41:23,900


415
00:41:26,320 --> 00:41:27,920
其他地方也做了同样的事，因为这个目标非常困难

416
00:41:29,700 --> 00:41:32,070


417
00:41:32,070 --> 00:41:37,260
我们需要接管的人类驾驶员，并且驾驶不是个简单的行为

418
00:41:37,260 --> 00:41:38,560
不仅仅是车辆的问题，也涉及到人类

419
00:41:39,230 --> 00:41:43,980
如果大家都能遵守规则，那么问题会简单一些，可是有些人不遵守交通规则

420
00:41:43,980 --> 00:41:45,360


421
00:41:45,360 --> 00:41:48,070
尤其是因为，自动驾驶汽车混在人类驾驶的汽车之间。

422
00:41:50,030 --> 00:41:52,630


423
00:41:52,630 --> 00:41:56,430
所以，取而代之的是，人没想到了可以设置一些用于实现等级4的限制条件

424
00:41:57,320 --> 00:42:00,220
可以让自动驾驶车辆，在没有其他车辆的私人道路道路上行驶

425
00:42:02,960 --> 00:42:05,680
比如，像一些私人道路上，也许是可行的

426
00:42:06,390 --> 00:42:08,150
就像在一些工厂里利用的机器人上，很久以前就实现的那样

427
00:42:10,920 --> 00:42:14,120
然后，我们可以进一步实现，在有其他车辆或者人的私人道路上，自动驾驶

428
00:42:17,400 --> 00:42:18,190
逐步实现（从没有其他车的私人道路，到有其他车的私人道路）

429
00:42:18,190 --> 00:42:23,190
那么这是一种新的ODD情况下的自动驾驶

430
00:42:23,190 --> 00:42:26,470
正如我们前面提到的这就是一种进步

431
00:42:27,700 --> 00:42:31,000
再然后，我们可以尝试在公开道路上（实现自动驾驶）

432
00:42:31,000 --> 00:42:34,303
在车里有人，有别的人类驾驶员的情况下，实现自动驾驶，这些都是在等级4里可以逐步在做的。

433
00:42:38,660 --> 00:42:41,829
而等级5，正如之前说的是超越等级4，自动驾驶汽车将可以在任何地方，在任何情况下驾驶

434
00:42:43,720 --> 00:42:49,230


435
00:42:49,230 --> 00:42:55,060
这里我们讲到了自动驾驶的不同的等级

436
00:42:56,480 --> 00:42:59,760
关于自动驾驶，仍然有有很多很多的误解，有很多人有各种不同的看法

437
00:42:59,760 --> 00:43:01,290


438
00:43:01,290 --> 00:43:06,470
并试图以不同的方式销售自动驾驶汽车

439
00:43:06,470 --> 00:43:08,290
尤其是一些营销人员，我没有任何不尊重的意思

440
00:43:08,290 --> 00:43:10,840


441
00:43:10,840 --> 00:43:12,970
我也是营销人员，但营销的目标是创造一个可以销售的市场

442
00:43:14,700 --> 00:43:18,720


443
00:43:18,720 --> 00:43:24,660
所以有时他们会去非常大胆（夸张）的说，我们已经解决了等级4的所有问题

444
00:43:24,660 --> 00:43:27,000


445
00:43:27,640 --> 00:43:33,610
他们可能会说我们可以向您保证，您将拥有一辆 100% 等级4的汽车

446
00:43:33,610 --> 00:43:37,220
我们几乎已经开始着手于等级5了，这不真实，不现实

447
00:43:37,220 --> 00:43:39,580


448
00:43:39,580 --> 00:43:44,120
这个说法中缺少很多东西，比如没有提到安全性的问题

449
00:43:44,120 --> 00:43:47,140


450
00:43:50,010 --> 00:43:57,800
这只是一个销售人员和营销人员的，关于自动驾驶的一个愿景

451
00:43:58,670 --> 00:44:02,370
管理者，尤其是高层管理人员CEO 或 CTO，公司里对技术更加清楚的负责人需要更加现实一点

452
00:44:02,370 --> 00:44:05,150


453
00:44:06,690 --> 00:44:10,040


454
00:44:10,740 --> 00:44:13,670
有责任向用户阐述这些功能的现状和事实，这些技术尚处在测试阶段

455
00:44:13,670 --> 00:44:16,130


456
00:44:17,230 --> 00:44:18,910
想要完全实现自动驾驶还需要几年的时间

457
00:44:18,910 --> 00:44:20,690
但我们可以做概念证明，我们可以部署一些技术，用于展示这些技术的效果

458
00:44:22,010 --> 00:44:23,760


459
00:44:23,760 --> 00:44:25,740
然后我们可以把这些功能提供给你们，这样的计划才比较现实一些

460
00:44:25,740 --> 00:44:29,670


461
00:44:29,670 --> 00:44:32,380
虽然没有谈到测试的结果部分

462
00:44:32,380 --> 00:44:35,780
但是这样更加有说服力，因为这更加真实

463
00:44:35,780 --> 00:44:37,640


464
00:44:40,110 --> 00:44:47,460
作为研究人员，我们知道想到达到人类驾驶员的能力

465
00:44:49,980 --> 00:44:56,370
如同有一个人类坐在驾驶位置上驾驶，我们还必须做很多事情

466
00:44:56,370 --> 00:44:58,120


467
00:44:58,120 --> 00:45:00,570
软件还没有达到这个水平，我们需要利用这些科技为用户带来安全的服务

468
00:45:00,570 --> 00:45:02,960


469
00:45:07,710 --> 00:45:10,410
我们研究人员，也许并不关心销售成绩，但我们需要做一些关于技术的演示

470
00:45:10,410 --> 00:45:15,720


471
00:45:19,450 --> 00:45:20,300
我们正在致力于解决这些难题，也许在某个时刻，我们会接触到产业界的想法

472
00:45:21,500 --> 00:45:24,940


473
00:45:24,940 --> 00:45:26,760
反而有一天可以实现产业界的一些要求

474
00:45:26,760 --> 00:45:30,840
我们需要保持一种研究和工业之间的协同关系

475
00:45:30,840 --> 00:45:34,900
而政府部门，虽然在这里我不会涉及到政府部门的话题

476
00:45:37,420 --> 00:45:43,840
但政府应该理解自动驾驶技术的潜力，特性，以及发展上的限制

477
00:45:47,270 --> 00:45:50,680
允许自动驾驶与其他人或者车辆，使用相同的环境

478
00:45:52,933 --> 00:45:56,570
并且为使用自动驾驶的人，提供保障其安全出行所需的条件

479
00:46:01,450 --> 00:46:06,380
例如，为了促进自动驾驶，向驾驶员和步行者路人

480
00:46:06,380 --> 00:46:09,840
提供（自动驾驶相关）保险等服务

481
00:46:09,840 --> 00:46:14,890
还可以为自动驾驶研究提供测试场地

482
00:46:14,890 --> 00:46:18,570
学术界，工业界和政府这三个方面

483
00:46:20,220 --> 00:46:23,240
需要协同工作，以促使自动驾驶的早日实现

484
00:46:28,550 --> 00:46:30,070
自动驾驶的最终目标和梦想是实现等级5

485
00:46:31,270 --> 00:46:35,950
从等级4逐步实现等级5有两种不同的路径

486
00:46:38,970 --> 00:46:42,390
第一种就是一些车企所采用的传统流程

487
00:46:42,390 --> 00:46:44,920
我们自己完成所有需要的开发，开发汽车，各个部件，还要开发所需的智能软件

488
00:46:51,210 --> 00:46:53,640
为什么不自己实现里面的高级别的软件呢，这就是传统公司的观点

489
00:46:57,740 --> 00:47:00,530
因为这样需要自己做全部，所以可能需要更多时间和努力

490
00:47:01,220 --> 00:47:03,970
也许因为他们已经实现了其中一部分，所以对于他们而言，这个方法也许更简单一些

491
00:47:05,160 --> 00:47:06,670


492
00:47:08,670 --> 00:47:12,760
可是无论如何，这个方法需要大量的工作和时间

493
00:47:14,260 --> 00:47:18,020
另外一种实现高度自动化功能的方法有与其他参与者协同工作

494
00:47:18,020 --> 00:47:19,700


495
00:47:21,950 --> 00:47:25,480
比如服务的多家供应商一起提供所需的一切，把相关的都连接起来

496
00:47:25,480 --> 00:47:28,180


497
00:47:29,810 --> 00:47:33,580
这样可以一起实现高等级的自动化了

498
00:47:34,860 --> 00:47:37,240
这个方法会导致系统里有许多不同的子系统

499
00:47:39,620 --> 00:47:42,630
这可能会导致系统更加容易发生错误

500
00:47:42,630 --> 00:47:50,060
这两种就是我们能实现等级5的路径

501
00:47:52,830 --> 00:47:56,240
现在丰田，本田，奥迪等等大企业，正朝着实现等级3，等级4迈进

502
00:47:56,240 --> 00:48:01,190


503
00:48:01,190 --> 00:48:04,190
有人甚至声称要实现等级5，他们提供了多种解决方案

504
00:48:04,190 --> 00:48:09,170


505
00:48:09,170 --> 00:48:14,860
比如丰田公司提出的e-Palette项目，他们指出这个项目不仅仅是关于车辆的服务，而是关于移动出行的服务

506
00:48:14,860 --> 00:48:18,790


507
00:48:18,790 --> 00:48:21,290


508
00:48:21,290 --> 00:48:25,510
因此丰田声称自己已不再是一辆单纯的车企

509
00:48:25,510 --> 00:48:27,760
车辆本身也不再是重要的商品，甚至声称可以让一些车辆供应商（为其造车）

510
00:48:27,760 --> 00:48:31,580


511
00:48:33,030 --> 00:48:36,350
但重要的是拥有移动出行服务，所以他们现在已经转型为移动出行企业

512
00:48:36,350 --> 00:48:39,210


513
00:48:39,210 --> 00:48:43,040
现在，还有其他软件公司也提出类似的想法，如谷歌，Waymo

514
00:48:44,600 --> 00:48:49,400


515
00:48:49,400 --> 00:48:52,040
他们也想要提供出行的方案，丰田汽车等汽车厂商也不想落后，因此也在开始提供移动解决方案。

516
00:48:52,040 --> 00:48:54,680


517
00:48:57,350 --> 00:49:06,280


518
00:49:06,280 --> 00:49:09,000
关于CASE的一个重要方面，是效率和经济，正如我们之前提到的，如果我们有这样的车辆，如本田车

519
00:49:13,570 --> 00:49:15,940


520
00:49:22,220 --> 00:49:26,360
自动驾驶是混在人类驾驶的车里的，这会降低出行的压力，比如减少堵车等情况的发生

521
00:49:26,360 --> 00:49:29,760


522
00:49:29,760 --> 00:49:33,190
并且这会使得我们的驾驶更加安全等等

523
00:49:33,190 --> 00:49:35,120
如果我们周围所有的车都是电动汽车，那么理论上，我们不会再有交通堵塞现象

524
00:49:35,120 --> 00:49:39,160


525
00:49:42,540 --> 00:49:44,610
每辆车都是电动的，那么也不会有尾气排放

526
00:49:44,610 --> 00:49:46,980


527
00:49:46,980 --> 00:49:49,290
而且因为一切都得到了适当的控制优化，汽车碰撞导致的事故也会变少

528
00:49:49,290 --> 00:49:53,150


529
00:49:53,150 --> 00:49:55,060
人类会更加安全和放松，而且因为每辆车都可以自动驾驶

530
00:49:55,060 --> 00:50:00,740


531
00:50:00,740 --> 00:50:02,650
我们不需要找靠近我们的工作场所的停车位，这样我们就可以去一些（人多的）公共区域的地方

532
00:50:06,250 --> 00:50:08,950


533
00:50:08,950 --> 00:50:13,280
回来时自动驾驶汽车来接我们回家，从而更好地利用土地，这是可以实现的

534
00:50:13,280 --> 00:50:15,980


535
00:50:15,980 --> 00:50:21,940
因为这些车辆是可以被拥有或被共享的

536
00:50:23,000 --> 00:50:25,350
比起使用共享系统，购置一台自动驾驶汽车，起初需要一大笔的费用

537
00:50:26,850 --> 00:50:29,490


538
00:50:37,390 --> 00:50:39,110
如果只是自己使用一辆车，从长远来看拥有它是最便宜的选择

539
00:50:39,110 --> 00:50:40,670


540
00:50:42,010 --> 00:50:47,140
但是共享汽车也许是更好的解决方案

541
00:50:52,890 --> 00:50:57,180
关于CASE (Connected Automated Sharing Electric)，和自动驾驶车辆还有其他方面要讲

542
00:50:57,180 --> 00:51:02,630


543
00:51:02,630 --> 00:51:06,590
车辆给人类的生活带来了很多改变，车辆事故就是其中之一

544
00:51:06,590 --> 00:51:09,600


545
00:51:10,540 --> 00:51:13,540
据说每年在世界各地有超过100万人死于车祸，我们想改变这个消极的状况

546
00:51:13,540 --> 00:51:15,860


547
00:51:19,240 --> 00:51:27,760
还有交通堵塞问题也为我们带了很多损失，因为人们不能在及时到达工作场所，人们不得不花一些时间在车里

548
00:51:27,760 --> 00:51:33,740


549
00:51:33,740 --> 00:51:36,370


550
00:51:36,370 --> 00:51:39,420
尾气排放是车辆带来的另一个重要方面，尤其是在交通拥堵的时候

551
00:51:39,420 --> 00:51:41,600


552
00:51:41,600 --> 00:51:45,150
还有在新的社会条件下，人口金字塔倒置问题

553
00:51:45,150 --> 00:51:49,600


554
00:51:49,600 --> 00:51:57,830
每年新生儿都越来越少，年轻人和孩子越来越少，而中老年人越来越多

555
00:51:57,830 --> 00:52:02,970


556
00:52:02,970 --> 00:52:06,707
这意味着老年人在全社会人口占比会变多，而老年人也许不是很好的司机

557
00:52:07,130 --> 00:52:10,660


558
00:52:10,660 --> 00:52:12,300
老年人可能会受到感官系统功能衰退的影响，认知能力，驾驶汽车的敏捷性也有可能随着年龄的增长而降低

559
00:52:14,300 --> 00:52:18,060


560
00:52:19,860 --> 00:52:24,570
他们中的部分人可能不再适合开车

561
00:52:26,150 --> 00:52:32,360
年轻人可能受过教育年轻人，可能因受过教育可以从事的工作

562
00:52:32,360 --> 00:52:35,400
因为人口问题，有些工作还是需要老年人来做，就像物流快递，用货车送货，搬运行李等等

563
00:52:35,400 --> 00:52:37,380


564
00:52:41,380 --> 00:52:45,470
在业务量没有减少，而人口的问题，缺少司机（Shortage of Drivers）每次都会成为一个问题

565
00:52:45,470 --> 00:52:48,950


566
00:52:48,950 --> 00:52:56,280
在人口问题上，诸如日本，我想在世界其他地方，也会有类似的问题

567
00:52:58,710 --> 00:53:00,160


568
00:53:00,160 --> 00:53:10,640
新的工作，新的生活区域开放了，因为那里土地便宜，人们就会移居到那里

569
00:53:10,640 --> 00:53:15,250


570
00:53:15,250 --> 00:53:20,940
新区域的生活的成本相对较低，这样使得他们可以拥有自己的住房

571
00:53:20,940 --> 00:53:22,400


572
00:53:22,400 --> 00:53:24,420
或者可以拥有自己的田地等等，许多人来到新开发的区域，形成新的社区

573
00:53:24,420 --> 00:53:26,990


574
00:53:26,990 --> 00:53:29,320


575
00:53:29,320 --> 00:53:31,020
可是这一类人口的子女，成年有可能选择离开这个区域，至少有部分新一代人口可能会想去大城市

576
00:53:31,020 --> 00:53:33,180


577
00:53:33,180 --> 00:53:36,760


578
00:53:38,370 --> 00:53:41,850
留下来的人口只有老年人，然后逐渐地这些老年人口也会减少

579
00:53:42,860 --> 00:53:47,040


580
00:53:47,040 --> 00:53:49,170
在这个区域居住的人口越来越少，前往该地点的交通工具也随着逐渐减少没落

581
00:53:49,170 --> 00:53:53,890


582
00:53:53,890 --> 00:53:57,770
所以这个人口金字塔倒置问题演变成了很严重的问题

583
00:53:57,770 --> 00:54:05,410
CASE带来的社会变革方面的影响，包括了出行即服务(Mobility as a Service)

584
00:54:06,895 --> 00:54:11,600
乘客经济，和物流变革等方面

585
00:54:13,350 --> 00:54:15,830
这里是对日本人口演变的预测，数据来自日本全国人口和社会保障研究所

586
00:54:15,830 --> 00:54:18,930


587
00:54:21,020 --> 00:54:25,680
从这张图大家可以看到人口数的变化情况，在超过75年期间，人口是呈现增长的

588
00:54:25,680 --> 00:54:28,840


589
00:54:32,020 --> 00:54:34,340
可是实际上年轻一代人口的数量正在急剧下降，这是一件非常严肃的事情

590
00:54:36,290 --> 00:54:39,450


591
00:54:39,450 --> 00:54:42,586
不仅是日本，许多地方都正在发生这样的情况

592
00:54:42,570 --> 00:54:47,210
这意味着人口金字塔的顶端老年人的数量越来越多

593
00:54:47,210 --> 00:54:51,280


594
00:54:51,280 --> 00:54:55,040
但他们不再适合驾驶汽车了，我们需要为他们带来其他解决方案

595
00:54:55,040 --> 00:54:57,170


596
00:54:57,170 --> 00:55:00,070
帮助老年朋友生活自由独立，比如可以自由的出行去购物，去医院，去看家人

597
00:55:00,700 --> 00:55:02,890


598
00:55:02,890 --> 00:55:06,000
比如可以自由的出行去购物，去医院，去看家人

599
00:55:06,860 --> 00:55:09,600
但是因为老年朋友驾驶汽车已经变得不方便，感知能力的衰弱会导致出行不便

600
00:55:11,780 --> 00:55:14,220


601
00:55:14,220 --> 00:55:17,340
我们需要为他们提供一种出行的方式，帮助他们自由独立的生活

602
00:55:17,340 --> 00:55:19,180


603
00:55:22,040 --> 00:55:26,890
(CASE)移动解决方案，被认为是可以解决这个问题的一个方案

604
00:55:26,890 --> 00:55:33,160
另外，自动驾驶的技术为在客运车辆，物流，出行即服务，运输等领域创造了许多商业机会

605
00:55:33,160 --> 00:55:36,150


606
00:55:45,240 --> 00:55:50,720
为很多领域创造了利益，包括，室内，工厂，农业，采矿，建筑，道路维护

607
00:55:53,100 --> 00:55:59,070


608
00:56:01,580 --> 00:56:03,700
自动化在这些领域都是可以实现的，这些变革正在逐步发生

609
00:56:03,700 --> 00:56:09,840


610
00:56:09,840 --> 00:56:12,770
这些改变不仅仅是关于车辆的，车辆是最容易被理解的

611
00:56:12,770 --> 00:56:14,370


612
00:56:14,384 --> 00:56:16,120
因为我们每天的生活场景里离不开车辆，这些变革也涉及到机器人，机器人也在这个社会扮演着重要的角色

613
00:56:16,120 --> 00:56:19,050


614
00:56:21,300 --> 00:56:25,650


615
00:56:25,650 --> 00:56:28,550
我们不经常看到机器人，是因为机器人通常出现在工厂这样的场景里

616
00:56:28,550 --> 00:56:30,220


617
00:56:30,220 --> 00:56:33,060
现在我们会不时的看到它们，有时在餐馆这类的场景里，有时看到一些机器人的在演示一些服务

618
00:56:33,060 --> 00:56:35,050


619
00:56:35,050 --> 00:56:36,450


620
00:56:37,250 --> 00:56:39,930
我们人类理解什么是汽车，我们驾车出行，对汽车更加熟悉

621
00:56:39,930 --> 00:56:40,890


622
00:56:43,760 --> 00:56:49,300
所以对车辆进行自动化的影响是更大的

623
00:56:49,300 --> 00:56:51,240
但我们需要记住，汽车上做的大部分事情是从机器人开始的

624
00:56:51,240 --> 00:56:54,330


625
00:56:58,400 --> 00:57:01,870
这个领域不仅仅是关于机械，汽车的底盘等车辆的硬件相关的部分

626
00:57:01,870 --> 00:57:05,700


627
00:57:05,700 --> 00:57:08,710
也包括软件等部分，甚至说软件部分是主要的

628
00:57:08,710 --> 00:57:10,250


629
00:57:10,250 --> 00:57:14,010
可以说自动驾驶功能有80%，90%取决于软件部分的性能

630
00:57:17,960 --> 00:57:20,590
而软件部分涉及的领域如此之多，像人工智能，数据科学，机器人学传感器，车辆工程学

631
00:57:20,590 --> 00:57:23,090


632
00:57:24,200 --> 00:57:26,560


633
00:57:26,560 --> 00:57:32,970
比如计算机网络，通信，以及如何在硬件平台进行计算等领域

634
00:57:32,970 --> 00:57:36,280


635
00:57:36,280 --> 00:57:40,520
因此，当开发了驾驶解决方案时，OEMs，供应商需要找到合作伙伴，帮助他们达成想要的目标

636
00:57:40,520 --> 00:57:49,190


637
00:57:49,190 --> 00:57:53,294


638
00:57:53,319 --> 00:57:57,490
为了更快的达成目标，大学，研究所和企业可以一起作出贡献促使这一结果的发生

639
00:57:57,490 --> 00:58:06,100


640
00:58:06,100 --> 00:58:08,040
那么现在让我们看一下市场上的一些趋势，看看这些科技会怎样影响我们的未来

641
00:58:08,040 --> 00:58:15,020


642
00:58:15,770 --> 00:58:20,980
为了实现理想的自动驾驶社会，我们会有专门用来服务的车辆（Service Cars）

643
00:58:20,980 --> 00:58:23,820


644
00:58:23,820 --> 00:58:26,020
这些自动驾驶车辆是被定义和设计用于特定的ODD的

645
00:58:26,020 --> 00:58:31,130
这些车也许并不常见，有些也许是私人使用的（Privately Owned Cars）自动驾驶车辆

646
00:58:31,130 --> 00:58:34,280


647
00:58:35,230 --> 00:58:38,200
一些等级2和等级3的车已经被大量生产和销售了

648
00:58:38,200 --> 00:58:42,170


649
00:58:45,722 --> 00:58:48,042
但是对于等级4的车辆，大部分情况下，这些车辆主要用于在工厂，用于清理道路等等

650
00:58:49,990 --> 00:58:54,260


651
00:58:54,260 --> 00:59:02,760


652
00:59:02,756 --> 00:59:05,860
对于自动驾驶车辆的外观，比如一些服务车辆（Service Cars），或者私家车（Privately Owned Cars）

653
00:59:05,860 --> 00:59:08,030
会随着阶段逐渐升级，现在我们还处在这个技术的初始阶段

654
00:59:08,030 --> 00:59:11,380


655
00:59:11,380 --> 00:59:13,730
我们会发展到调试/适应这个技术的阶段，与市场进行调整，

656
00:59:13,730 --> 00:59:15,940


657
00:59:15,940 --> 00:59:18,740
在私家车领域，现在已经实现了等级2和等级3｜2025年以后更多先进的功能会得到应用

658
00:59:18,740 --> 00:59:20,860


659
00:59:25,380 --> 00:59:30,650


660
00:59:30,650 --> 00:59:37,830
2020年，哦，不好意思，说错了，2030年以后，等级3，等级4会得到商业化和产品化

661
00:59:37,830 --> 00:59:43,120


662
00:59:44,130 --> 00:59:47,850
对于服务车辆（Service Cars）例如用户可以乘坐的自动驾驶｜车辆或者用于运输货物的车

663
00:59:47,850 --> 00:59:49,890


664
00:59:49,890 --> 00:59:53,870
我们也可以看到随着时间，技术会得到改善

665
00:59:53,870 --> 00:59:56,772


666
00:59:56,260 --> 00:59:58,660
我们可以看到市场将会拓展到更多的应用，和更多的领域

667
01:00:00,219 --> 01:00:03,990
而这些应用也会根据不同的路况｜比如高速公路或者城市道路，而不同

668
01:00:05,160 --> 01:00:07,810


669
01:00:09,070 --> 01:00:17,750
而2030年之后，技术的应用会对环境更加适应。

670
01:00:17,750 --> 01:00:22,400
关于这个技术，我们还需要技术与生活更加的融合，更加符合我们的生活需求

671
01:00:22,400 --> 01:00:27,300


672
01:00:27,290 --> 01:00:30,360
并能够与其他人的需求更加兼容

673
01:00:30,360 --> 01:00:34,020
仅仅因为自动驾驶车辆的存在，我们不能要求其他的道路使用者，不能对他们说请不要手动驾驶了

674
01:00:41,980 --> 01:00:44,870


675
01:00:45,780 --> 01:00:48,290
我们必须与环境相融合，目前我们是在软件里定义需要处理的一切

676
01:00:48,290 --> 01:00:51,350


677
01:01:02,340 --> 01:01:05,180
在自动驾驶的技术领域，只靠自己去完成所有的事情是非常困难的

678
01:01:05,180 --> 01:01:08,680
也因此已经存在一个生态系统，这个系统里有多家公司

679
01:01:08,680 --> 01:01:11,650


680
01:01:11,650 --> 01:01:15,570
在许多不同领域做不同事情，自动驾驶汽车的所有组成部分，可以合作起来一起实现

681
01:01:18,000 --> 01:01:24,260


682
01:01:24,260 --> 01:01:29,560
我们可以思考一下手机的例子，手机也经历了一个开源的生态系统的发展过程

683
01:01:31,710 --> 01:01:38,510


684
01:01:38,510 --> 01:01:43,120
比如在90年代第一代的手机，是一个这样的手持设备

685
01:01:43,120 --> 01:01:46,750


686
01:01:46,750 --> 01:01:50,450
在2000年代，出现了智能手机，然后出现了安卓系统

687
01:01:50,450 --> 01:01:54,860


688
01:01:54,860 --> 01:01:58,740
手机也是这样占领了市场，变成了我们现在使用的手机

689
01:01:59,620 --> 01:02:04,970


690
01:02:05,760 --> 01:02:07,890
对于个人计算器(PC)和其他产业也经历了类似的发展途径达到一个这个产业的垄断

691
01:02:07,890 --> 01:02:12,900


692
01:02:12,900 --> 01:02:15,640


693
01:02:15,640 --> 01:02:23,150
处于这样的目的，自动驾驶也需要一个可以交互的生态系统

694
01:02:23,150 --> 01:02:24,540
许多自动驾驶的公司，比如TierIV也认识到了这一点，他们想针对不同的客户提供这些技术

695
01:02:24,540 --> 01:02:27,790


696
01:02:27,790 --> 01:02:30,150


697
01:02:32,820 --> 01:02:36,080
这样他们就可以为自动驾驶车辆提供各种软件方案，比如说，一些用来监视, 支持，检测天气的服务

698
01:02:36,080 --> 01:02:40,160


699
01:02:41,400 --> 01:02:46,930
他们拥有的所有东西都是一些软件，也就是现如今的Autoware

700
01:02:47,600 --> 01:02:49,100


701
01:02:49,499 --> 01:02:53,919
Autoware一开始是由名古屋大学开发的，后来被转到TierIV ，再后来就是Autoware Foundation由管理

702
01:02:55,160 --> 01:02:56,600
他们现在的商业模型就是，基本上就是结合这些Autoware Foundation拥有的功能

703
01:02:56,600 --> 01:03:00,260


704
01:03:02,120 --> 01:03:04,750
用来为更多的用户，解决更多的用户需求，提供更多的服务

705
01:03:04,750 --> 01:03:06,160


706
01:03:06,160 --> 01:03:13,520


707
01:03:13,520 --> 01:03:17,620
现在，让我们讨论一下开源的自动驾驶

708
01:03:19,410 --> 01:03:21,780
在这个讨论中我们要先提一下，为什么（开源）软件很重要

709
01:03:22,298 --> 01:03:27,858


710
01:03:27,886 --> 01:03:31,590
也就是说为什么要投资在一个需要，很多研究人员，研究团队，长年研究，

711
01:03:41,680 --> 01:03:44,940


712
01:03:44,940 --> 01:03:50,260


713
01:03:50,260 --> 01:03:52,929
而，大家都可以使用的软件

714
01:03:53,453 --> 01:03:56,590
那么，这里的游戏是为什么呢，所以我们想先谈谈这个

715
01:03:56,590 --> 01:03:58,400


716
01:03:58,400 --> 01:04:04,930
然后在介绍，ROS,　Autoware, apollo，是怎么为开源软件作出贡献的

717
01:04:04,930 --> 01:04:06,720


718
01:04:06,720 --> 01:04:09,870
为什么要全力以赴并将其奉献给社区，这整个想法是这样的

719
01:04:09,870 --> 01:04:13,970


720
01:04:15,360 --> 01:04:18,100
因为，（开源）社区会包含每个人的改进，这样一来，我们就不需要去实现每一个功能

721
01:04:18,100 --> 01:04:24,420


722
01:04:25,289 --> 01:04:28,426
这种情况通常会发生在当你要尝试开发一项新技术

723
01:04:29,932 --> 01:04:33,992
大多数时候，你想开发的新技术，在开源的版本中已经有人实现过了

724
01:04:34,904 --> 01:04:39,876
了解别人是如何设计，如何实现的，了解什么样的决策会导致更差的结果

725
01:04:41,543 --> 01:04:45,180


726
01:04:45,180 --> 01:04:48,950
让你在自己的应用开发里少走弯路

727
01:04:48,950 --> 01:04:52,570
许多常见的任务，在社区里都可以找到不同的尝试

728
01:04:52,570 --> 01:04:55,250


729
01:04:55,250 --> 01:04:59,260
比如有些人是做控制的，有些人做传感器的，有些人是做路径规划的

730
01:04:59,267 --> 01:05:01,202


731
01:05:01,197 --> 01:05:03,300
社区里有那么多不同的东西，有些人有一些更加聪明的解决方法

732
01:05:03,300 --> 01:05:05,200


733
01:05:05,200 --> 01:05:08,480
可以把他们的尝试放到一起，做一些共同的任务，形成一个共同的平台

734
01:05:08,480 --> 01:05:11,460


735
01:05:11,460 --> 01:05:16,070
并为社区提供服务，最先进的尖端技术，方法可以被快速验证

736
01:05:16,070 --> 01:05:19,330


737
01:05:19,330 --> 01:05:21,220


738
01:05:21,220 --> 01:05:24,150
如果你有一台机器人或者一辆车，想尝试着做一些关于路径规划的研究

739
01:05:24,150 --> 01:05:26,550


740
01:05:31,960 --> 01:05:34,650
但你没有软件平台也没有相关的软件，路径规划取决于传感器，路径规划的结果需要送到控制端去

741
01:05:34,650 --> 01:05:38,320


742
01:05:38,320 --> 01:05:40,690
如果你没有传感器，识别，和控制等等的模块的话，就不能测试路径规划的算法

743
01:05:40,690 --> 01:05:43,950


744
01:05:43,950 --> 01:05:48,990
这个（开源的）想法是为了能够测试你自己的研究

745
01:05:50,350 --> 01:05:52,930
你可以利用这些平台不必每次都重新实现这些功能

746
01:05:52,930 --> 01:05:55,540
以前我们是这样做的，比如，在机器人领域，当我们想开发执行某些指令的功能

747
01:05:55,985 --> 01:05:57,705


748
01:05:57,728 --> 01:05:59,330
这些功能用于完成某些任务，我们不得不从头开始写代码，因为那之前什么都没有

749
01:05:59,330 --> 01:06:01,720


750
01:06:01,720 --> 01:06:04,140


751
01:06:04,140 --> 01:06:08,660
通过开源的研究社区，人们可以保持专注于自己的特定领域，进行测试

752
01:06:08,660 --> 01:06:11,020


753
01:06:19,380 --> 01:06:22,200
而这个研究结果又可以造福这个社区

754
01:06:29,810 --> 01:06:32,579
但这不是开源社区必须免费的原因，没有必要一定免费

755
01:06:34,280 --> 01:06:39,300
你可以购买某些代码用于测试，但这并不意味着你可以免费获得

756
01:06:39,300 --> 01:06:42,230


757
01:06:43,890 --> 01:06:46,400
出于什么原因，使用者或许对某些代码有疑问，或者需要以某种方式进行修改，而使用者又不知道怎么做

758
01:06:47,370 --> 01:06:49,660


759
01:06:49,660 --> 01:06:53,680
那么原作者，可以向使用者收取一些费用，来帮助你解决你的问题，这就是为什么开源可以成为一种商机

760
01:06:56,960 --> 01:07:01,510


761
01:07:01,510 --> 01:07:05,500
因为你创作了一款优秀的软件，有就像Autoware，其他一些公司为了用于自己的特定应用

762
01:07:06,180 --> 01:07:09,816


763
01:07:10,349 --> 01:07:14,320
会有某些特定的需求，比如，Autoware在被发布之后，引起了许多不同的汽车制造商的兴趣

764
01:07:16,639 --> 01:07:20,210


765
01:07:22,540 --> 01:07:28,260
比如，丰田对于他们来说，从零开始搭建整个框架系统是一项艰巨的任务，即使他们是一家大公司

766
01:07:29,157 --> 01:07:31,960
为了完成某些开发任务，一开始可能没有专业人才或者资源可以马上着手（开发）

767
01:07:33,449 --> 01:07:36,329


768
01:07:40,380 --> 01:07:43,916
所以他们可以先开始用Autoware，可Autoware并不完全匹配他们的需求

769
01:07:45,640 --> 01:07:48,490
因为他们想要测试的是特制的一些功能，这样两家公司之前的业务就可以成立了

770
01:07:49,150 --> 01:07:53,240


771
01:07:53,247 --> 01:07:56,984
第一个业务是提供软件修改配置

772
01:07:58,707 --> 01:08:04,013
第二个则是，帮助定制服务或者根据需求去匹配适合的源代码

773
01:08:07,175 --> 01:08:11,280
特别是当客户有定制需求的时候，这就是开源代码的使用方式

774
01:08:11,280 --> 01:08:14,510


775
01:08:14,510 --> 01:08:18,939
其实过去有一些很好的公司完全反对开源，比如过去的微软

776
01:08:22,710 --> 01:08:26,290


777
01:08:26,290 --> 01:08:29,970
他们甚至告诉所有开源的人这是非常糟糕的事情，对企业很不利，说这是个坏主意

778
01:08:31,660 --> 01:08:35,997


779
01:08:36,630 --> 01:08:40,460
现在他们开始明白开源是可以获利的，而且整个社区也会因此而成长，自己也会得到进步

780
01:08:40,872 --> 01:08:44,310


781
01:08:47,319 --> 01:08:55,020
ROS系统是机器人操作系统，是由机器人基金会创建的

782
01:09:00,035 --> 01:09:05,207
过去是由一群人发起的，后来他们成立了一家叫做Willow Garage的企业

783
01:09:06,694 --> 01:09:10,800
他们不仅开发机器人还想写一些可以被利用的共通代码

784
01:09:15,130 --> 01:09:20,750
并且希望这些代码可以被社区里其他人也能利用

785
01:09:25,250 --> 01:09:30,220
因此他们开发了ROS系统，大约在2007年左右，从那一刻起ROS系统在社区中变得非常流行

786
01:09:31,760 --> 01:09:35,920


787
01:09:35,920 --> 01:09:43,660
他们在2009年发布了第一代的ROS系统

788
01:09:43,660 --> 01:09:48,300
ROS一代出于某些原因，每次发布一个新的版本会使用乌龟作为为宠物

789
01:09:56,510 --> 01:10:04,820
所以每个版本的ROS系统都以一种乌龟种类的名称命名，你们听到的名称里有这样几种

790
01:10:11,215 --> 01:10:16,120
Indigo Igloo，Indigo是一个形容词靛蓝，Igloo实际上是一种乌龟品种的名称

791
01:10:16,111 --> 01:10:20,611


792
01:10:21,915 --> 01:10:26,320
或者是一些与乌龟相关的词汇，比如这里的Lunar Loggerhead

793
01:10:26,320 --> 01:10:31,380
Loggerhead 是一种乌龟的品种，而Lunar是一个有相同的首字母与乌龟相关的词

794
01:10:32,900 --> 01:10:37,750
然后在2015年的某个时间点之后发布了ROS2代

795
01:10:40,400 --> 01:10:45,750
在ROS2，我们后面的课程也会讲到，决定摆脱很多一直影响ROS1代的问题

796
01:10:45,750 --> 01:10:49,186


797
01:10:49,850 --> 01:10:53,710
其中之一就是，（ROS一代）缺乏实时处理能力

798
01:10:54,259 --> 01:10:58,530
ROS2已经声称，大部分的社区已经逐渐从ROS1代转到了ROS2代，现在大部分的开发都是基于ROS2代的

799
01:10:59,210 --> 01:11:02,110


800
01:11:02,660 --> 01:11:08,690
事实上，ROS1代的最后一个版本是2020年发布的，这是他们发布的最后一个版本ROS1代

801
01:11:14,270 --> 01:11:19,670


802
01:11:23,540 --> 01:11:29,030
因为他们现在已经集中在做ROS2代了，ROS Noetic Ninjemys, 这里Noetic是一个乌龟的品种名

803
01:11:29,030 --> 01:11:36,500


804
01:11:36,500 --> 01:11:41,330
是ROS第13次正式发布的版本，也是最后一个版本（的ROS1代）

805
01:11:42,240 --> 01:11:48,400
ROS里发布的所有项目的，是为了打造一个能协作的机器人提供所需的工具包

806
01:11:50,640 --> 01:11:54,700


807
01:11:56,690 --> 01:11:59,730


808
01:12:00,140 --> 01:12:03,470
不仅限于机器人，ROS也非常适合用于自动驾驶汽车的开发

809
01:12:03,470 --> 01:12:13,890
（开发）自动驾驶汽车和机器人基本上是一样的，需要调整速度等信息，解决人类是否驾驶等问题

810
01:12:13,890 --> 01:12:19,010


811
01:12:19,010 --> 01:12:25,550
ROS提供功能包括，Plumbing用于程序之间的通信，运行程序，并传送程序之间的信息

812
01:12:25,550 --> 01:12:27,890


813
01:12:30,010 --> 01:12:33,113
还有用于可视化的工具，坐标变换，访问数据的不同模式，数据记录等等功能

814
01:12:33,100 --> 01:12:37,740


815
01:12:37,740 --> 01:12:39,980
还包括一些能够设计算法的能力，比如，包含一些预先写好的相对较简单的算法

816
01:12:41,430 --> 01:12:44,560


817
01:12:45,880 --> 01:12:50,800
比如一些算法是涉及路径规划，聚类（分类），或者物体识别的，这些都是公开提供的

818
01:12:50,800 --> 01:12:54,680


819
01:12:56,560 --> 01:12:59,730
在很多社区，都在展开一些关于ROS的活动，

820
01:12:59,730 --> 01:13:04,600
像在工作坊或者在学术会议上，也有人介绍了相关的知识

821
01:13:06,362 --> 01:13:10,800
所以许多人开始关注ROS，并且开始使用它，形成了一个世界范围的生态系统

822
01:13:10,800 --> 01:13:16,020


823
01:13:16,020 --> 01:13:20,940
大家都在利用ROS，不仅如此，ROS还有很多文档和教程

824
01:13:22,800 --> 01:13:26,950


825
01:13:26,950 --> 01:13:29,480
安装很简单编写代码可以用 C++完成，也可以用Python完成

826
01:13:30,580 --> 01:13:32,710


827
01:13:34,400 --> 01:13:38,030
而且你可以理解ROS，这是一件ROS里有的很棒的事情

828
01:13:38,030 --> 01:13:41,660
关于ROS，现在出现了两个不同自动驾驶车辆的平台Autoware和apollo

829
01:13:43,800 --> 01:13:49,050


830
01:13:49,050 --> 01:13:55,090
Autoware是2014，2015年左右在名古屋大学诞生的

831
01:13:55,090 --> 01:14:00,328
然后由一家日本的叫做TierIV的公司，接管并且持续开发

832
01:14:01,740 --> 01:14:06,660
使其商业化，并处理客户提出的许多个性化的要求

833
01:14:07,560 --> 01:14:11,230


834
01:14:11,230 --> 01:14:14,900
现在甚至发展的更远，已经成长为一个叫做Autoware Foundation的组织

835
01:14:14,880 --> 01:14:18,940
现在是一家，联合了多家企业，研究机构和社区，致力于改善Autoware的机构

836
01:14:20,210 --> 01:14:25,620


837
01:14:27,763 --> 01:14:32,573
apollo是一个开源的自动驾驶汽车平台

838
01:14:34,020 --> 01:14:36,960
是由百度这家公司研究和开发的

839
01:14:36,960 --> 01:14:39,410
百度拥有监督整个系统的权限

840
01:14:41,370 --> 01:14:44,180
所以在某一个意义来说，对于社区而言没有那么开放

841
01:14:45,129 --> 01:14:48,132
使用者可以下载代码，还可以根据自己的需要进行调整

842
01:14:48,120 --> 01:14:51,256


843
01:14:52,187 --> 01:14:55,707
但由于开发受到百度的监督想要创新会有点困难

844
01:14:55,690 --> 01:15:01,160
这个平台也在世界上非常受欢迎

845
01:15:01,160 --> 01:15:08,910
很多公司正在使用它，最新的发布的版本是6.0

846
01:15:08,910 --> 01:15:15,200
那么，它们有什么不同呢

847
01:15:16,580 --> 01:15:19,970
Autoware基本上是基于ROS系统的，其中Autoware AI是基本上基于ROS1代的

848
01:15:19,970 --> 01:15:23,430


849
01:15:23,430 --> 01:15:28,850
是基于ROS1的最新一个版本的，而apollo也是基于部分ROS1代的

850
01:15:28,850 --> 01:15:33,800


851
01:15:33,800 --> 01:15:35,300
但是他们发现了ROS1代的很多问题

852
01:15:35,300 --> 01:15:37,970
Autoware也发现了，所以Autoware决定从ROS1代转向ROS2代了

853
01:15:37,954 --> 01:15:40,390


854
01:15:40,390 --> 01:15:43,990
而apollo则决定搭建了自己的系统，这个新系统叫做apollo Kernel

855
01:15:44,334 --> 01:15:46,970
他们决定放弃使用ROS，而决定使用apollo Kernel

856
01:15:51,880 --> 01:15:58,340
从而能够控制底层的机器人操作系统

857
01:15:58,340 --> 01:16:01,820
安装Autoware的方法，有用Docker

858
01:16:01,820 --> 01:16:05,840
或者直接从源代码就行安装和编译，这个也被称为native install

859
01:16:05,840 --> 01:16:11,120
apollo只能用Docker安装，需要调整参数

860
01:16:11,120 --> 01:16:14,356
可视化系统，Autoware用的是运行时管理器（the runtime manager）

861
01:16:14,360 --> 01:16:17,300
RViz，也就是ROS自带的可视化工具

862
01:16:17,306 --> 01:16:24,806
apollo则有这个非常漂亮的网络界面Web interface-Dreamview

863
01:16:25,340 --> 01:16:27,210
那么什么是Autoware呢，它是第一个世界上第一个开源的

864
01:16:27,210 --> 01:16:33,370


865
01:16:33,370 --> 01:16:41,480
基于ROS的自动驾驶平台的，它包含所有的ROS的功能

866
01:16:41,480 --> 01:16:44,983


867
01:16:45,780 --> 01:16:49,350
及所有的实现全自动驾驶所所需的功能

868
01:16:50,740 --> 01:16:54,720
Autoware并不是由一个小团体开发的作品

869
01:16:58,760 --> 01:17:02,363
它有来自全球范围内的帮助，许多的企业都参与其中

870
01:17:02,340 --> 01:17:06,390
在这里你可以看到一些事实，比如平台支持30加种车辆类型

871
01:17:07,356 --> 01:17:09,826
不是30辆车，而是30种不同的车型

872
01:17:11,540 --> 01:17:16,230
被世界上多个国家支持，并且正在被多家企业采用

873
01:17:16,230 --> 01:17:18,810


874
01:17:20,300 --> 01:17:28,120


875
01:17:30,278 --> 01:17:34,516
这也证明了，如果一个完全开源的平台，遵守社区发展的标准

876
01:17:35,217 --> 01:17:38,017
遵循共通并且规范的原理原则，那么开源的项目也会被广泛的接受

877
01:17:38,570 --> 01:17:41,720


878
01:17:41,720 --> 01:17:47,360
整个框架包含几个重要的功能

879
01:17:48,680 --> 01:17:52,820
传感（Sensing）是利用传感器来收集外部的信息，以及车辆内部的信息

880
01:17:55,600 --> 01:17:58,770


881
01:17:58,770 --> 01:18:03,270
定位（Localization）则是找到车辆在这个世界上的当前位置

882
01:18:04,590 --> 01:18:08,740
使用传感器数据，并通过传感器数据，以及潜在的地图数据

883
01:18:08,740 --> 01:18:13,970


884
01:18:13,970 --> 01:18:21,710
试图找到你在当前地图上的相对位置

885
01:18:21,697 --> 01:18:25,901
还有感知（Perception）功能，感知功能可以获取传感器数据

886
01:18:25,900 --> 01:18:29,169
并且可以通过潜在的地图数据，试图去检测自己所处环境里物体的信息

887
01:18:29,171 --> 01:18:32,871


888
01:18:32,870 --> 01:18:36,080
比如有一些静态（static）的物体，如汽车

889
01:18:36,080 --> 01:18:38,790
如果有些移动的物体不是静止的，而是动态（dynamic）的

890
01:18:38,771 --> 01:18:40,540


891
01:18:40,540 --> 01:18:43,630
那么你可以追踪它是怎样随着时间移动的

892
01:18:43,630 --> 01:18:46,610
比如生成它到目前为止的移动轨迹（trajectory）

893
01:18:47,008 --> 01:18:52,080
甚至你可以预测它们将来的移动轨迹是怎样的

894
01:18:52,080 --> 01:18:57,000
路径规划就是寻找一条从出发点到目标地之间的最优路径

895
01:18:57,000 --> 01:18:59,560


896
01:19:00,740 --> 01:19:03,860
以及怎样躲避障碍物，怎样躲避不同危险程度的障碍物

897
01:19:03,860 --> 01:19:06,860


898
01:19:08,450 --> 01:19:11,470
当检测到交通信号时需要停车等等，也包含泊车功能

899
01:19:11,470 --> 01:19:15,860


900
01:19:15,860 --> 01:19:19,063
控制（Control）取得来自路径规划的信息，并生成所需要的指令输出给车辆

901
01:19:19,040 --> 01:19:21,609


902
01:19:21,610 --> 01:19:25,550
比如，具体转向盘需要转多少角度，需要加速多少等

903
01:19:26,020 --> 01:19:27,570


904
01:19:27,570 --> 01:19:30,790
并直接发送给连接到车辆的一个车载接口（vehicle interface）

905
01:19:31,396 --> 01:19:34,700


906
01:19:34,700 --> 01:19:36,840
也可以接收来自远程的命令，如车站发来的信息

907
01:19:40,060 --> 01:19:44,660
不仅可以接受来自自动驾驶汽车，还有远程车站的信息

908
01:19:44,660 --> 01:19:49,610
远程中心可以给车辆发送信息来控制车辆行为

909
01:19:49,610 --> 01:19:52,540
Autoware Community非常庞大，这个社区是在Github上运营的

910
01:19:52,540 --> 01:19:55,476


911
01:19:56,825 --> 01:19:59,965
现在已经拥有超过 4000 stars以及超过1800的forks

912
01:20:00,729 --> 01:20:06,039
社区有非常多的贡献者和成员，这个资料里展示的这些数据不是最近的

913
01:20:10,910 --> 01:20:12,880


914
01:20:12,880 --> 01:20:16,980
现在社区已经有500多家企业和20多个国家等成员

915
01:20:21,241 --> 01:20:26,079
另外，在教育领域，Autoware被认为是用于教育的标准平台

916
01:20:26,540 --> 01:20:32,110
Autoware也被OEMs(代工厂商们) 用于概念验证和制作产品原型

917
01:20:33,592 --> 01:20:37,730
Autoware Foundation有60多名成员，包括非常大的知名企业，如arm，因特尔，NXP，Xilinx

918
01:20:41,840 --> 01:20:53,160


919
01:20:53,160 --> 01:20:57,264
这些都是芯片制造商，ADLink是计算器制造商

920
01:20:57,240 --> 01:21:00,680
有政府部分，比如美国交通部

921
01:21:03,601 --> 01:21:09,207
有传感器制造商，例如，HESAI，Velodyne或robosense等等

922
01:21:11,410 --> 01:21:14,690
还有学术机构，如名古屋大学，东京大学，琦玉大学

923
01:21:14,690 --> 01:21:19,890


924
01:21:19,890 --> 01:21:26,360
还有一些来自世界各地的学术机构

925
01:21:29,393 --> 01:21:35,700
例如Poznan University of Technology， Florida Polytechnic University，和其他大学和机构

926
01:21:36,980 --> 01:21:41,740
有60多名成员包含其中，有一些最近的成员没有在这张图里

927
01:21:41,740 --> 01:21:45,677


928
01:21:46,234 --> 01:21:49,714
例如一家叫做Microtrain，是另外一家计算机制造商

929
01:21:50,785 --> 01:21:55,290
Autoware有很多的项目，比如一开始的项目叫做Autoware.AI

930
01:21:55,290 --> 01:21:59,470
我们的课程会讲到的，Autoware.AI是初代的Autoware

931
01:21:59,940 --> 01:22:03,320
是基于ROS1代开发的，它起先是用来学习这平台的

932
01:22:03,320 --> 01:22:07,060


933
01:22:08,520 --> 01:22:11,480
这就是为什么这堂课里，我们要教Autoware.AI

934
01:22:11,480 --> 01:22:13,670
这样我们可以有个初步的了解

935
01:22:13,670 --> 01:22:16,280
这个项目是由一群研究人员基于研究目的开发的，因此会有一些使用上的限制

936
01:22:16,280 --> 01:22:20,210


937
01:22:20,210 --> 01:22:23,420
但对于这个课程而言，它已经足够满足我们的需求

938
01:22:23,420 --> 01:22:24,770


939
01:22:24,770 --> 01:22:26,920
这个项目也包含一些高级功能，很多企业至今都还在使用Autoware.AI

940
01:22:26,920 --> 01:22:31,890
来验证概念（Proof of Concepts）和搭建模型（Prototyping）

941
01:22:32,440 --> 01:22:37,445
第二个，Autoware.IO则是把Autoware当做一个插件，用在一个芯片系统或者硬件上

942
01:22:38,310 --> 01:22:41,850


943
01:22:44,420 --> 01:22:49,640
Autoware的功能被安装在一些ECU或者一些不同的传感器上

944
01:22:54,340 --> 01:22:59,460
或者在一些低级驾驶用的几种CPU上面

945
01:22:59,460 --> 01:23:02,310
最后一个项目，叫做Autoware.Auto，又被改名为Autoware.core或者universe

946
01:23:02,310 --> 01:23:05,830


947
01:23:05,830 --> 01:23:08,810
使用的是最先进的软件管理规格，重新实现了Autoware.AI的所有功能

948
01:23:08,810 --> 01:23:17,340


949
01:23:17,340 --> 01:23:21,760
在多名工业界的成员的的监督下

950
01:23:23,300 --> 01:23:27,840
基于工业的规范标准和工程原理原则下重新编写，并且经过了严格的测试

951
01:23:27,840 --> 01:23:35,650


952
01:23:35,650 --> 01:23:38,619
现在你们可以看到一些Autoware的演示视频

953
01:23:38,630 --> 01:23:43,330
第一个是Autoware在2015年12月在日本地区公路上演示的视频

954
01:23:46,388 --> 01:23:51,748
2015年12月，加藤真平教授作为Autoware的早期的作者（创始人），以及整个系统的架构设计者

955
01:23:52,527 --> 01:23:55,997


956
01:23:56,010 --> 01:24:01,915
他正在演示Autoware在日本公路上实际演示的样子

957
01:24:06,500 --> 01:24:09,840
你们可以看到他在测试Autoware，红色的道路没有什么特别的含义

958
01:24:09,840 --> 01:24:13,476


959
01:24:16,140 --> 01:24:20,530
名古屋市区公共汽车优先的车道，跟自动驾驶汽车并没有什么特别的关系

960
01:24:20,530 --> 01:24:24,780


961
01:24:24,780 --> 01:24:29,230
这个是Autoware的早期演示视频之一

962
01:24:29,230 --> 01:24:34,600
2016年，我们有更多的Autoware的实际演示，继续在测试Autoware的各项功能

963
01:24:36,071 --> 01:24:39,774
他们开始做更多的实机演示，更多的测试，也就是这一年他们成立了TierIV公司

964
01:24:40,410 --> 01:24:42,880


965
01:24:42,880 --> 01:24:45,650
实际上到了这个阶段他们开始邀请更多的普通人

966
01:24:45,650 --> 01:24:50,255
非工程师的人来测试和观察这些技术的表现如何

967
01:24:50,730 --> 01:24:53,700
这样一来，（开发团队）可以了解，其他人是否能够接受这些技术

968
01:24:53,700 --> 01:25:00,250


969
01:25:05,333 --> 01:25:10,071
总体来说，用户有了一些非常正面的反馈

970
01:25:10,071 --> 01:25:13,341
当它们真的坐在一辆自动驾驶车辆里，没有人操纵/触摸方向盘或刹车

971
01:25:14,900 --> 01:25:17,800


972
01:25:18,160 --> 01:25:21,130
但这台车能自主移动到目的地，有些人在起初表现出了紧张

973
01:25:21,130 --> 01:25:25,550
也有一些人开始时感到有些害怕，表示有一些担心

974
01:25:26,366 --> 01:25:30,270


975
01:25:30,270 --> 01:25:38,770


976
01:25:38,770 --> 01:25:41,440
当人们第一次乘坐这样的交通工具，人们会觉得不安全，可能会感到害怕

977
01:25:41,440 --> 01:25:45,850


978
01:25:47,640 --> 01:25:50,820
但过了一段时间，人们觉得这个技术很好，感觉很舒服

979
01:25:50,820 --> 01:25:58,720
在当时那个时期，人们还不了解这个技术，不知道什么是Lidar，这些都不是日常生活会了解的东西

980
01:26:01,550 --> 01:26:04,390


981
01:26:04,390 --> 01:26:07,480
人们以前从未见过它，也不知道它是用来干什么的，但在那之后，人们开始了解更多关于（自动驾驶）车辆的信息

982
01:26:07,480 --> 01:26:11,083


983
01:26:11,110 --> 01:26:14,180
（相关部门的人）多次在街道上进行演示

984
01:26:14,180 --> 01:26:18,850
这是2017年的另外一次自动驾驶汽车在公路上的演示

985
01:26:18,850 --> 01:26:22,580


986
01:26:22,580 --> 01:26:26,060
到了这一时期，许多不同的协议已经被制定了

987
01:26:27,500 --> 01:26:30,160
获得了自动驾驶汽车能够在公路上进行测试的资格

988
01:26:32,270 --> 01:26:34,230
当这个资格被取的之后，TierIV甚至跟一家保险公司合作

989
01:26:40,950 --> 01:26:43,950
开始提供日本第一个自动驾驶相关的保险，所以在这个视频里，你可以看到

990
01:26:45,300 --> 01:26:48,400


991
01:26:49,070 --> 01:26:52,907
这辆自动驾驶汽车正在开进位于名古屋市的高速公路入口处

992
01:26:54,500 --> 01:26:59,660
位于名古屋市的高速公路入口处，高速公路入口处（日本称之为ETC）

993
01:26:59,660 --> 01:27:03,810


994
01:27:03,810 --> 01:27:13,470
然后它开始在高速公路上的行驶

995
01:27:14,095 --> 01:27:22,237
2018年，TierIV又与日本邮政合作，以提供用于收集邮件，送邮件

996
01:27:23,371 --> 01:27:31,731
以及处理日本邮政包裹的自动驾驶服务

997
01:27:33,120 --> 01:27:37,524
这里我们可以介绍一个视频，这里你们可以看到Autoware在自动驾驶车辆上面的表现

998
01:27:38,490 --> 01:27:43,770


999
01:27:43,770 --> 01:27:46,939
当然这个车的方向盘后面的坐着发驾驶员

1000
01:27:46,929 --> 01:27:50,700
因为在日本，为了在突发的事故中能够及时进行对应，自动驾驶车辆在公路上驾驶，驾驶员必须坐在驾驶位

1001
01:27:50,700 --> 01:27:59,430


1002
01:27:59,430 --> 01:28:09,630
这个是另外一个项目，东京的一个项目的视频，日本出租车公司

1003
01:28:09,630 --> 01:28:12,280


1004
01:28:12,280 --> 01:28:16,517
这个项目是为了搭建一个能够乘坐的（自动驾驶）系统，在这个项目里，驾驶员不用坐在驾驶座上了

1005
01:28:18,210 --> 01:28:23,650


1006
01:28:23,650 --> 01:28:27,440
从大约2020年开始，日本更改了自动驾驶相关的法律法规，允许驾驶座位上没有驾驶员

1007
01:28:32,580 --> 01:28:35,570


1008
01:28:35,570 --> 01:28:38,340
但是前提是必须有人在远程监视车辆的状态

1009
01:28:40,490 --> 01:28:43,730
在这个项目里，这台自动驾驶车辆行驶时，有人在远程进行监督

1010
01:28:43,730 --> 01:28:46,230
有人坐在远程控制中心，正在监视这台自动驾驶车辆是否正常

1011
01:28:46,230 --> 01:28:49,890


1012
01:28:51,737 --> 01:28:55,040
出于这个原因Autoware取得了很大的进展，TierIV做了很多的尝试

1013
01:28:55,592 --> 01:28:59,330
致力于改善传统的Autoware.AI，发展到拥有跟多先进的功能

1014
01:28:59,330 --> 01:29:03,500


1015
01:29:04,540 --> 01:29:07,780
我们将在接下来的课程为大家进行介绍，在这次日本出租车的示范中

1016
01:29:08,480 --> 01:29:22,560
甚至请到了东京市的市长，参加了这次的自动驾驶技术的体验

1017
01:29:22,560 --> 01:29:26,450


1018
01:29:26,450 --> 01:29:36,080


1019
01:29:36,080 --> 01:29:38,382
为了确保这次的技术演示的安全，这辆车安装了多台传感器

1020
01:29:38,380 --> 01:29:40,420


1021
01:29:40,420 --> 01:29:42,755
甚至有很多冗余的设置，有一个人一直在远程监控这台车辆

1022
01:29:42,757 --> 01:29:45,760


1023
01:29:45,760 --> 01:29:53,010
这是通过4G和5G的通信技术达到的，以此来保证自动驾驶系统的安全性

1024
01:29:54,890 --> 01:29:59,410


1025
01:30:18,890 --> 01:30:22,740
也许你们也听说过， 2021年日本东京举办了奥运会

1026
01:30:36,820 --> 01:30:42,490
所以他们制作了这台自动驾驶的巴士，这台叫做E-pallete的丰田车是用来接送运动员的

1027
01:30:42,490 --> 01:30:47,027


1028
01:30:48,830 --> 01:30:58,000
这台车正是使用了Autoware系统环绕运行，在固定的场所（运动员的住所）之间移动

1029
01:31:05,126 --> 01:31:08,663
你们可以看到视频中多台巴士，这台巴士车内车外都安装了多台传感器

1030
01:31:10,560 --> 01:31:16,790


1031
01:31:16,790 --> 01:31:21,995
这台巴士非常小心，会预测行人是否会穿过马路

1032
01:31:23,540 --> 01:31:27,740
而且这台车在奥运会的数个月期间，搭乘了多名运动员

1033
01:31:39,310 --> 01:31:41,950
Autoware作为一个具备自动驾驶所需的所有功能的工具

1034
01:31:43,330 --> 01:31:47,910
也包含自我定位的功能，这个功能使用了Lidar(激光雷达)

1035
01:31:47,910 --> 01:31:49,760
所以你可以在这里看到Lidar的PointCloud(点云)，正在寻找它在世界上的位置

1036
01:31:49,760 --> 01:31:53,220


1037
01:31:53,220 --> 01:31:57,210
在一个高清地图（High-Definition Maps，又被叫做HD Maps）里，道路的元素被编码（encode）了

1038
01:31:57,210 --> 01:31:59,712


1039
01:32:00,748 --> 01:32:03,348
这里，蓝色的线，代表的是这台车应该行驶的车道的中央，人行横道也被标记了出来

1040
01:32:03,951 --> 01:32:06,220


1041
01:32:07,655 --> 01:32:11,759
红绿灯也被高亮标示了出来，哪里应该有个红绿灯，路口在哪里，车道的边界线在哪里等等信息

1042
01:32:16,200 --> 01:32:19,380


1043
01:32:19,380 --> 01:32:25,460
这些元素会大大简化路径规划的运算难度

1044
01:32:27,260 --> 01:32:32,431
所以HD Maps，是另一种的传感器，能为我们带来更过的环境的语义信息，以及多种路径规划算法和车辆控制等功能

1045
01:32:36,980 --> 01:32:45,188
此外，也包括使用相机和激光雷达的几种最先进的感知算法

1046
01:32:45,780 --> 01:32:56,140


1047
01:32:56,140 --> 01:33:00,043
当然，Autoware也可以执行支线任务，比如在这前的日本出租车的视频里看到的

1048
01:33:00,050 --> 01:33:04,521


1049
01:33:04,880 --> 01:33:11,586
系统可以从远程控制中心，去控制一台自动驾驶车辆

1050
01:33:11,582 --> 01:33:16,220
你可以看到，这里有一个正在监视自动驾驶车辆的人

1051
01:33:16,220 --> 01:33:20,350
他正在观看从车载相机里通过WI-FI传过来的信息

1052
01:33:20,350 --> 01:33:24,270


1053
01:33:24,270 --> 01:33:33,300
并且可以远程控制自动驾驶系统的方向盘和加减速

1054
01:33:33,300 --> 01:33:36,360
因为这是拥有很多功能的平台，也有很多相关的功能也正在出现

1055
01:33:36,343 --> 01:33:39,780


1056
01:33:39,780 --> 01:33:46,140
比如车队管理系统 (Fleet Management System)

1057
01:33:46,144 --> 01:33:53,417
所以你可以控制车辆，查看车辆所在的位置，检测车辆的状态

1058
01:33:53,870 --> 01:33:59,150
如果某些车辆发生了问题，可以接管并检查发生了什么问题

1059
01:33:59,150 --> 01:34:05,055
另外还有用来训练，评测，生成数据的工具如，地图，数据库，或者还有开源的

1060
01:34:05,044 --> 01:34:10,550


1061
01:34:10,550 --> 01:34:14,830
人机交互界面或者一些可以取代Autoware部分功能的开源代码

1062
01:34:14,830 --> 01:34:17,999


1063
01:34:19,720 --> 01:34:22,900
还有其他种类的车辆类型，传感器，和配置等

1064
01:34:27,720 --> 01:34:34,560
TierIV作为一个主要致力于开发Autoware的公司，也创造了庞大的业务

1065
01:34:34,560 --> 01:34:38,800


1066
01:34:38,800 --> 01:34:43,250
这些业务主要是基于多个现有的ODDs

1067
01:34:48,620 --> 01:34:52,080
ODD就是我们之前提到的运行设计域(Operational Design Domains)

1068
01:34:56,000 --> 01:34:58,160


1069
01:34:59,794 --> 01:35:02,684
用来定义和制约系统，保证其正常且安全运行的规则域

1070
01:35:05,360 --> 01:35:08,070
如果系统有一些条件不在ODD的范围内，那么系统可能不再安全，且车辆应该停止工作

1071
01:35:08,070 --> 01:35:10,780


1072
01:35:14,909 --> 01:35:18,489
比如系统的ODD定义只能在天气晴朗是没问题的，或者轻微多云的气候环境下运行

1073
01:35:20,181 --> 01:35:22,731


1074
01:35:25,030 --> 01:35:27,950
实际上大多数公司也都会这样做的

1075
01:35:29,457 --> 01:35:32,497
但如果今天在下雨，那么你不应该把自动驾驶汽车开出去，就是这个意思

1076
01:35:32,493 --> 01:35:35,096


1077
01:35:36,897 --> 01:35:42,703
如果ODD定义为不下雨的天气条件的话，这是违反ODD的规则的

1078
01:35:45,810 --> 01:35:53,110
你可以把ODD理解为你的车外有一个盒子

1079
01:35:57,910 --> 01:36:00,990
TierIV定义了许多种类的的ODDs，比如

1080
01:36:04,760 --> 01:36:06,950
ODD1是一种自动驾驶专用的环境，比如私人道路

1081
01:36:07,710 --> 01:36:11,210
ODD2是一种工厂内部的运输道路，也是私人道路

1082
01:36:11,210 --> 01:36:15,500
ODD3是城市道路，则是公开道路，ODD3是郊区道路/城市道路，则是公开道路

1083
01:36:18,440 --> 01:36:20,820
基于这三种不同的ODD条件，创建了多种类型的项目

1084
01:36:20,820 --> 01:36:24,400


1085
01:36:25,940 --> 01:36:33,390
有一个项目叫做Pilot Auto X1是用于运输货物的

1086
01:36:35,222 --> 01:36:38,025
Pilot Auto X2则是机器人巴士公交车/机器人摆渡车

1087
01:36:42,300 --> 01:36:45,780
可以看出主要是限制在ODD2里，和一点点ODD3，也就是郊区道路

1088
01:36:45,780 --> 01:36:49,150


1089
01:36:49,150 --> 01:36:52,090
送货机器人属于Pilot Auto S1，包含ODD1里专用道路的情况

1090
01:36:52,090 --> 01:36:54,620


1091
01:36:54,620 --> 01:36:57,850
ODD2里的工厂运输道路，和一点点的ODD3里的一点点郊区道路

1092
01:36:57,850 --> 01:37:02,380


1093
01:37:02,380 --> 01:37:06,050
最后还有Pilot Auto XX1是自动驾驶出租车，而Pilot Auto XX2消费者用的自动驾驶汽车

1094
01:37:06,399 --> 01:37:13,940


1095
01:37:13,940 --> 01:37:15,810
那么最后我们总结一下，ODD1通常被定义为低速，短程的条件，通常在有较多限制的设施里面

1096
01:37:15,810 --> 01:37:21,110


1097
01:37:21,110 --> 01:37:24,646


1098
01:37:24,650 --> 01:37:28,270
ODD2则定义为物流和公司内部的运输或校园内移动

1099
01:37:34,580 --> 01:37:38,984
ODD3则定义在郊区的小路，公园的某些区域的路线，山区的一些路线

1100
01:37:40,640 --> 01:37:43,190


1101
01:37:43,190 --> 01:37:46,993
如果再进一步的话，可以是市区，比如一个大城市里的道路

1102
01:37:53,540 --> 01:37:57,600
根据每个ODD，不同的车辆可以根据不同的ODD来定义在不同的情况下做不同的事情

1103
01:37:57,600 --> 01:38:00,320


1104
01:38:02,190 --> 01:38:05,910
例如，一个货物运输的车辆，它需要有一个安全和覆盖率高的车辆周围设置

1105
01:38:05,910 --> 01:38:09,160


1106
01:38:09,160 --> 01:38:11,390
因此，它得有个激光雷达在这里，传感器覆盖更多的侧面和前侧的区域

1107
01:38:11,390 --> 01:38:13,650


1108
01:38:14,300 --> 01:38:18,437
所以它需要3个激光雷达，也许后面也需要传感器

1109
01:38:20,040 --> 01:38:23,500
ODD也明确定义了闭区域（Closed area）使用用途是运输货物

1110
01:38:24,910 --> 01:38:26,711
还定义了约束条件，例如，速度的最大值和最小值

1111
01:38:26,710 --> 01:38:30,300


1112
01:38:30,300 --> 01:38:33,903
什么样的物体，需要被识别，还有检测的距离区间等等

1113
01:38:35,020 --> 01:38:38,300


1114
01:38:38,300 --> 01:38:44,340
支持的天气条件包括白天/夜晚/晴天/雨天，而不支持的包括雪天/烟雾/水蒸气

1115
01:38:45,150 --> 01:38:52,960


1116
01:38:52,960 --> 01:38:55,970
对于ODD而言，越是高阶的ODD遇到危险的可能性越大

1117
01:38:57,230 --> 01:38:59,450
需要更多的传感器，传感器也越需要配置

1118
01:39:02,890 --> 01:39:06,730
比如机器人公交巴士，需要如此多的传感器

1119
01:39:06,730 --> 01:39:13,320
你可以看到这里有HESAI Pandar 40P, QT

1120
01:39:13,320 --> 01:39:16,100
一些相机，一些地理位置（GNSS）接收器，一些GMU

1121
01:39:16,100 --> 01:39:20,180


1122
01:39:20,180 --> 01:39:22,160
在这类型的车上，在定义目标等参数的时候

1123
01:39:22,150 --> 01:39:24,920
例如，操作的速度被定义在要低于20km/h

1124
01:39:24,920 --> 01:39:33,450
被检测到的物体有这些，物体识别的距离，红绿灯的信息，虽然这里没有写

1125
01:39:33,450 --> 01:39:38,021


1126
01:39:40,340 --> 01:39:49,030
还有一些规定，比如不准超车区段(No passing zone)则代表不准超车等等

1127
01:39:49,830 --> 01:39:52,570


1128
01:39:52,570 --> 01:39:55,880
有一些项目，例如，搬运货物项目，是由TierIV和雅马哈motor通过协作完成的

1129
01:39:55,880 --> 01:39:58,430
这个合作项目的名称叫做eve autonomy，是给工厂内部的这种车辆提供操作服务

1130
01:39:58,940 --> 01:40:02,843


1131
01:40:03,620 --> 01:40:06,840
基本上这些车都是Golf车，传感器经过特殊调试，导入了Autoware系统

1132
01:40:06,840 --> 01:40:09,010


1133
01:40:09,010 --> 01:40:10,530


1134
01:40:10,530 --> 01:40:15,760
是专门用来搬运货物的

1135
01:40:15,760 --> 01:40:20,850
X2项目是关于，之前介绍过的，为运动员搭乘用的丰田的e-Palette

1136
01:40:20,850 --> 01:40:23,300
这是一辆小型机器人公交巴士，用来交通和运送货物，是TierIV和丰田一起开发的

1137
01:40:23,300 --> 01:40:29,910


1138
01:40:29,910 --> 01:40:33,380
X2项目还包括机器人公交巴士，是由TierIV和其他车企一起开发的

1139
01:40:33,380 --> 01:40:41,130


1140
01:40:41,130 --> 01:40:45,960
还有，创建一个小型研究平台，甚至能满足小型商业用途，叫做Logiee

1141
01:40:45,960 --> 01:40:48,760


1142
01:40:48,760 --> 01:40:56,460
这个项目就是之前演示过的，机器人出租车，是由TierIV和日本出租车公司一起开发的

1143
01:40:56,930 --> 01:41:02,100


1144
01:41:02,100 --> 01:41:07,200
TierIV目前与其他的公司一起打造消费者用自动驾驶汽车

1145
01:41:14,540 --> 01:41:17,940
与富士康合作，这个项目叫做MIH项目

1146
01:41:18,595 --> 01:41:21,965


1147
01:41:21,960 --> 01:41:26,000
在这MIH项目，富士康的目的是打造一款像iPhone一样

1148
01:41:26,000 --> 01:41:30,320
大部分都可以买得起的低价格的一款电动汽车

1149
01:41:33,216 --> 01:41:36,820
系统则导入了Autoware，这就是他们的想法，这就是Pilot Auto XX2

1150
01:41:36,820 --> 01:41:41,990


1151
01:41:41,990 --> 01:41:47,760


1152
01:41:47,760 --> 01:41:50,496
Autoware, TierIV, 以及Autoware Foundation，与世界各地进行了很多合作

1153
01:41:50,500 --> 01:41:53,930


1154
01:41:55,590 --> 01:42:01,720
在2016年，TierIV, Udacity美国把Autoware部署到一台真正的汽车上

1155
01:42:06,710 --> 01:42:09,810
在美国，他们开了不算很远，大约开了31英里

1156
01:42:09,810 --> 01:42:12,646
但这次是在公路上驾驶的，很多条件都和日本不同

1157
01:42:13,480 --> 01:42:18,100


1158
01:42:19,350 --> 01:42:26,710
由来自世界各地的不同的合作伙伴带来了实际演示

1159
01:42:26,710 --> 01:42:30,900
他们都在使用Autoware，不同的城市，比如硅谷，Estonia

1160
01:42:30,900 --> 01:42:34,640


1161
01:42:34,640 --> 01:42:40,300
还有我自己也参与的，跟兰州大学合作的项目

1162
01:42:42,930 --> 01:42:50,180
乔教授负责的这个小组，在那里，他们也在研究自动驾驶

1163
01:42:50,180 --> 01:42:54,260


1164
01:42:54,260 --> 01:42:56,210
在使用Autoware，他们在探索5G的通信技术，远程驾驶

1165
01:42:56,210 --> 01:42:58,860


1166
01:43:00,312 --> 01:43:04,950
他们完成了地图生成，还改进了自我定位等等功能

1167
01:43:04,950 --> 01:43:10,260
还有就是我之前介绍过的，有人试图将Autoware用到一级方程式比赛F1赛车上

1168
01:43:14,810 --> 01:43:21,100


1169
01:43:21,100 --> 01:43:25,060
我们自己所处的名古屋大学的自动驾驶研究小组

1170
01:43:26,260 --> 01:43:29,940
也一直在努力改进Autoware，通过引进新的技术，例如点云压缩技术

1171
01:43:29,940 --> 01:43:34,177


1172
01:43:35,189 --> 01:43:39,060
3D地图生成的新技术，自我定位功能，多种物体检测和躲避障碍物的方法

1173
01:43:41,970 --> 01:43:48,140


1174
01:43:48,140 --> 01:43:52,500
多种模拟场景的实验，能见度的预测，还包括端到端（E2E）深度学习的研究课题

1175
01:43:54,640 --> 01:43:56,930


1176
01:43:56,930 --> 01:44:00,470
这个方法主要就是从原始数据，通过一个深层网络，生成一个传感器控制信号

1177
01:44:03,420 --> 01:44:06,740


1178
01:44:06,740 --> 01:44:09,450
我们打算大规模的实验这种方法，不仅在实际的车辆上，也在小型机器上面

1179
01:44:09,450 --> 01:44:16,850


1180
01:44:16,850 --> 01:44:20,780
到这里我们主要介绍了Autoware，主要讨论了开源的项目

1181
01:44:20,780 --> 01:44:23,550


1182
01:44:24,370 --> 01:44:34,000
apollo也是一个开源的自动驾驶平台，是在2017年问世的

1183
01:44:34,000 --> 01:44:38,480
apollo已经开始每年都在增长，发布了许多版本

1184
01:44:40,000 --> 01:44:45,860


1185
01:44:45,860 --> 01:44:50,140
版本6是最新的，将提供一个完全无人驾驶的平台

1186
01:44:53,100 --> 01:44:56,040
apollo这个项目是由百度开发的，现在仍受到百度的支持

1187
01:44:56,040 --> 01:45:03,070


1188
01:45:03,077 --> 01:45:05,380
已经开始延伸到其他的一些企业里

1189
01:45:05,380 --> 01:45:09,880
它跟Autoware略有不同，Autoware有一个非常大的开发人员的社区

1190
01:45:09,880 --> 01:45:14,610


1191
01:45:15,160 --> 01:45:18,740
但这些开发人员不属于同一个组织，他们工作环境非常开放

1192
01:45:18,740 --> 01:45:23,910


1193
01:45:23,910 --> 01:45:27,140
apollo是由百度的内部员工一起开发的，这样的话，百度可以更好的控制开发

1194
01:45:27,140 --> 01:45:31,470


1195
01:45:31,470 --> 01:45:38,370
他们做了很多很好的功能，做了很多很好的尝试

1196
01:45:38,370 --> 01:45:40,510


1197
01:45:41,530 --> 01:45:45,960
例如，因为ROS1代不能处理实施信息等问题，放弃了ROS

1198
01:45:46,560 --> 01:45:49,730
然后创建一个自己的系统，就做apollo Kernel

1199
01:45:50,580 --> 01:45:53,680


1200
01:45:53,680 --> 01:45:56,100
这也是一个创新，但这也意味着，你想把自己的代码迁移到apollo上

1201
01:45:56,100 --> 01:45:59,880
你需要完全舍弃掉关于ROS的开发，需要从零开始学习apollo

1202
01:46:01,080 --> 01:46:03,530


1203
01:46:03,530 --> 01:46:09,800


1204
01:46:09,800 --> 01:46:12,990
它们为某些传感器提供驱动程序，也具有地图生成，自我的位置定位，物体检测，轨迹跟踪，校准等功能

1205
01:46:12,990 --> 01:46:18,028


1206
01:46:18,390 --> 01:46:20,920
他们不直接提供有些工具，如生成地图等

1207
01:46:20,920 --> 01:46:24,140
但是你可以向他们发送你的传感器数据，他们把校准后的数据或地图信息返送给你

1208
01:46:24,520 --> 01:46:27,800


1209
01:46:27,800 --> 01:46:30,000
这就是他们提供服务的方式，也是一种商业模式

1210
01:46:30,000 --> 01:46:32,000


1211
01:46:32,000 --> 01:46:37,680
跟Autoware相比，两者之间有些区别，apollo5.0包含许多元素

1212
01:46:37,680 --> 01:46:41,680


1213
01:46:41,680 --> 01:46:43,850
比如，机器人出租车，代客停车，CarOS，云服务，比如，在云端的高清地图

1214
01:46:45,100 --> 01:46:51,210


1215
01:46:52,740 --> 01:46:56,840
以及数据库的安全，还有 V2X通信，也就是说外部环境的传感器或者信号数据

1216
01:46:56,840 --> 01:47:04,240


1217
01:47:04,240 --> 01:47:08,720
可以在汽车端（利用V2X）进行读取，然后这些数据会被融合到感知模块里

1218
01:47:10,420 --> 01:47:14,320


1219
01:47:14,320 --> 01:47:17,350
而开源平台包含以下这些（模块），Map Engine, 自我定位，感知，预测等等

1220
01:47:17,350 --> 01:47:20,986


1221
01:47:21,480 --> 01:47:27,285
这些由Cyber RT和实时操作系统，如Ubuntu支持

1222
01:47:28,610 --> 01:47:34,849
支持多种不同的硬件，包含不同的计算机，IMU，相机，激光雷达，等等

1223
01:47:44,780 --> 01:47:49,718
apollo 6.0则更加进化了，包括对感知，预测，路径规划，车辆控制功能的支持和强化

1224
01:47:53,390 --> 01:48:00,720


1225
01:48:00,720 --> 01:48:06,740
还增加了对多种的硬件的支持，系统的基本配置被解释的很清楚，你可以在相关文档中找到

1226
01:48:06,740 --> 01:48:10,076


1227
01:48:11,093 --> 01:48:14,530
你可以使用哪种激光雷达，激光雷达应该放在哪个位置

1228
01:48:14,521 --> 01:48:16,701
其他东西的位置，可以用什么样的电脑等等

1229
01:48:16,877 --> 01:48:19,080
所以部署这样的系统会相对简单

1230
01:48:19,080 --> 01:48:23,920
在实现的某个阶段，只能使用特定的传感器，特定的电脑，特定的类型GNSS，导致使用上略有限制

1231
01:48:23,920 --> 01:48:25,200


1232
01:48:25,200 --> 01:48:29,190


1233
01:48:29,190 --> 01:48:31,959


1234
01:48:31,960 --> 01:48:33,600
但随着时间的推移，现在情况发生了变化

1235
01:48:33,600 --> 01:48:37,360
现在已经支持多种类型的传感器和计算机

1236
01:48:37,360 --> 01:48:40,329
那么我们看一下一个apollo首选配置的例子

1237
01:48:44,080 --> 01:48:48,020
我想这是apollo3.5的例子，那时这里面就有多种模块

1238
01:48:48,020 --> 01:48:51,090


1239
01:48:51,090 --> 01:48:55,390
在这里是一个演示视频，这是Web-interface（apollo的可视化工具）的演示

1240
01:48:55,390 --> 01:48:57,830


1241
01:48:57,830 --> 01:49:00,340
你可以非常直观的看到可视化的结果

1242
01:49:00,340 --> 01:49:02,160
而且你还可以控制，这些激活的apollo的性能参数，这使得事情变得比较简单

1243
01:49:02,160 --> 01:49:04,690


1244
01:49:04,690 --> 01:49:11,400
在Autoware里，并没有这样的漂亮的可视化界面，我们实际上使用了 ROS里已有的工具

1245
01:49:13,980 --> 01:49:16,970


1246
01:49:16,970 --> 01:49:20,520
Rviz，也就是Rviz2，这不是一个糟糕的决定

1247
01:49:20,528 --> 01:49:23,998


1248
01:49:27,020 --> 01:49:31,330
因为Autoware现在致力于尽量使用社区里已有的（模块，工具等）

1249
01:49:34,340 --> 01:49:39,230
在这课程，我不会说哪一个更好

1250
01:49:39,230 --> 01:49:42,900
这节课我将介绍Autoware，所以我的看法带有一些偏差

1251
01:49:42,900 --> 01:49:48,570
但是作为一种对比，Autoware倾向于发布，更接近纯粹的标准的开源项目业务

1252
01:49:48,570 --> 01:49:52,690


1253
01:49:56,410 --> 01:49:59,000
如同ROS在做的事情

1254
01:49:59,000 --> 01:50:01,840
这意味着想拓展到使用Autoware的话会简单，会灵活

1255
01:50:04,736 --> 01:50:08,240
因为如果你知道怎么用ROS，和怎么用开源的东西，那么就可以开始着手使用Autoware了

1256
01:50:08,240 --> 01:50:12,550


1257
01:50:12,550 --> 01:50:14,860
开源的open意味着打开，让更多的人在一起工作

1258
01:50:14,860 --> 01:50:16,680


1259
01:50:16,680 --> 01:50:19,900
也就使得有更多的机会获得，对更多（种）的硬件支持，以及会在更多的地方使用

1260
01:50:20,670 --> 01:50:22,810


1261
01:50:23,500 --> 01:50:26,770
但是，Autoware在某些方面还不够好，比如没有Web-interface这样的图形界面

1262
01:50:26,770 --> 01:50:28,080


1263
01:50:28,080 --> 01:50:31,600
而且在很多事情上都不是很好，Autoware.AI的开发之初并不是用于验证的

1264
01:50:31,600 --> 01:50:39,260


1265
01:50:39,260 --> 01:50:42,060
而apollo里的实现也许更加稳定，在使用apollo的某个阶段，需要使用特定的硬件

1266
01:50:44,780 --> 01:50:49,200


1267
01:50:50,663 --> 01:50:53,500
与Autoware相比，这是一种限制，而且因为你必须使用这个CyperRT

1268
01:50:53,500 --> 01:50:56,240


1269
01:50:56,240 --> 01:50:58,575
那么想要适应这个系统需要更多的时间，但apollo有更完整和扎实的功能实现

1270
01:50:58,570 --> 01:51:01,650


1271
01:51:11,820 --> 01:51:14,489
在过去，我们曾经尝试做这样的一件事情

1272
01:51:14,501 --> 01:51:17,771
当然，Autoware的开发离不开工业界的使用，和商业上的扩展

1273
01:51:21,650 --> 01:51:28,340
但在另一方面，我们一直企图教育人们什么是自动驾驶

1274
01:51:28,340 --> 01:51:32,770
以及希望教大家，作为实现自动驾驶的平台要如何使用Autoware

1275
01:51:32,770 --> 01:51:34,010


1276
01:51:34,010 --> 01:51:39,830
所以我们在日本展开了一些服务，在日本开办了一个叫做Autoware Academy的地方

1277
01:51:39,830 --> 01:51:42,700


1278
01:51:42,700 --> 01:51:44,470
所以人们可以去那里，学习什么是自动驾驶

1279
01:51:44,470 --> 01:51:49,190


1280
01:51:49,190 --> 01:51:52,240
利用的（当然是）Autoware，以及怎样在实车上实现

1281
01:51:52,680 --> 01:51:55,660


1282
01:51:55,660 --> 01:52:00,330
在中国，我们和PIX训练营一起，我们把学生带到基地

1283
01:52:00,330 --> 01:52:06,990


1284
01:52:08,150 --> 01:52:11,390
一开始学生就可以使用真实的汽车来学习Autoware，和实现自动驾驶

1285
01:52:11,390 --> 01:52:17,630
我们也举办了一些其他的活动

1286
01:52:17,630 --> 01:52:22,970
那么，日本的Autoware Academy，是从2016年开始运营的

1287
01:52:22,970 --> 01:52:27,490


1288
01:52:27,490 --> 01:52:33,580
在这次新冠的危机中不得不暂停了

1289
01:52:33,580 --> 01:52:40,440
这个活动会持续4到5天，最后一天会作为动手活动的一天

1290
01:52:40,440 --> 01:52:44,540


1291
01:52:45,536 --> 01:52:49,540
这个课程会涉及到自动驾驶的各个方面

1292
01:52:49,540 --> 01:52:54,978
这是一个由TierIV设计的关于Autoware的教育课程

1293
01:52:58,370 --> 01:53:02,580
现在已经发展到由另一家公司在提供在线课程

1294
01:53:05,620 --> 01:53:12,860
但这个学院早期阶段，学员们会去一个叫做安全学习中心的地方

1295
01:53:12,860 --> 01:53:20,450


1296
01:53:21,070 --> 01:53:26,170
位于日本的丰田市，这个中心人工模拟了一个城市

1297
01:53:26,170 --> 01:53:29,840
具有日本普通道路的所有元素

1298
01:53:30,550 --> 01:53:34,160
在这里有一家公司会专门对自动驾驶进行评估

1299
01:53:40,620 --> 01:53:44,710


1300
01:53:44,710 --> 01:53:47,950
前一段时间，在中国，当然是在新冠发生之前，我们曾经运营了一个培训基地

1301
01:53:48,550 --> 01:53:54,480
这个培训基地是由PIX，优达学城，和TierIV三家公司一起合作运营的

1302
01:53:56,060 --> 01:54:00,530
这是个5天的，全程需要动手参加的活动

1303
01:54:03,730 --> 01:54:06,540
从一开始到最后一天，学生都可以使用汽车

1304
01:54:06,540 --> 01:54:08,020


1305
01:54:08,020 --> 01:54:10,960
然后你可以使用Autoware，并且可以让这辆车跑起来，这就是训练基地的介绍了

1306
01:54:11,850 --> 01:54:14,780


1307
01:54:16,250 --> 01:54:18,910
实际上，现在这个训练课程的内容，也是参考了训练基地培训内容定义的

1308
01:54:18,910 --> 01:54:20,420


1309
01:54:31,130 --> 01:54:36,390
所以，现在这个课程也包括怎样操作使用Autoware

1310
01:54:36,402 --> 01:54:39,706
并涵盖了如何实现自动驾驶的所有方面

1311
01:54:39,706 --> 01:54:45,745
我们（TierIV）提供Autoware，和培训相关内容

1312
01:54:45,745 --> 01:54:49,015
Udacity提供学生

1313
01:54:49,015 --> 01:54:53,086
PIX Moving提供设施和移动的这些设备

1314
01:54:53,086 --> 01:54:58,146
我要给大家看一些中文的视频

1315
01:54:57,790 --> 01:55:02,028
听一下参加者的感想

1316
01:56:56,342 --> 01:57:01,714
好的，也许到了第二个阶段

1317
01:57:01,714 --> 01:57:07,186
你们也要参加培训内容和一些需要动手的活动

1318
01:57:07,186 --> 01:57:10,957
这个训练基地有类似的组成

1319
01:57:10,957 --> 01:57:17,130
有一个理论部分，由我来讲解怎样使用Autoware

1320
01:57:17,130 --> 01:57:24,370
然后有一个实用部分，学生们真的上车，动手去测试

1321
01:57:24,370 --> 01:57:28,640
这也是我们这个课程也想达到的效果

1322
01:57:28,641 --> 01:57:31,878
然后这是一次很棒的经历

1323
01:57:31,878 --> 01:57:35,868
这里我们想大家尽量去结合这两个组成部分

1324
01:57:35,882 --> 01:57:41,187
一个是技术的理论背景，还有一个是实用的部分

1325
01:57:41,187 --> 01:57:46,259
然后把两个结合在一起，在真实的车上动手实现

1326
01:57:46,259 --> 01:57:49,162
所以，这就是我们想要看到的

1327
01:57:49,162 --> 01:57:52,799
这是一个非常有趣的训练基地。学员们对结果很满足。

1328
01:57:52,799 --> 01:57:57,136
把自己的成果带回自己所在的企业

1329
01:57:57,136 --> 01:58:03,242
这会为他们所在的企业，也带来巨大的价值

1330
01:58:05,144 --> 01:58:11,484
在其他国家也看到了类似的事情，比如泰国

1331
01:58:11,484 --> 01:58:15,955
我们组织了研讨会讨论Autoware的知识

1332
01:58:15,955 --> 01:58:19,892
然后参加人员安装并运行了Autoware

1333
01:58:19,892 --> 01:58:23,822
只需要Autoware和这台丰田小型汽车，我们就可以实现这个过程

1334
01:58:23,830 --> 01:58:29,940
在新加坡南洋理工大学，在爱沙尼亚的Tallinn University

1335
01:58:30,336 --> 01:58:37,477
我们举办了座谈会，在我自己的国家，在我的度假期间

1336
01:58:37,477 --> 01:58:43,249
最后也举办了关于Autoware的简单的座谈会

1337
01:58:43,783 --> 01:58:49,288
还有，美国交通部，他们的CARMA项目里，正在使用Autoware

1338
01:58:49,288 --> 01:58:52,458
CARMA是一个自动驾驶平台

1339
01:58:52,458 --> 01:58:57,630
而且他是完全基于Autoware的平台，Autoware Online

1340
01:58:57,630 --> 01:59:01,033
这次的课程我们不需要用到它

1341
01:59:01,033 --> 01:59:06,873
Autoware Online是用来，即使你没有电脑也没有一台车的时候

1342
01:59:06,873 --> 01:59:13,646
我们提供在Amazon Web Service (AWS) 云端的一个服务

1343
01:59:13,646 --> 01:59:17,617
然后你就可以云端运行Autoware了

1344
01:59:17,617 --> 01:59:22,488
当然，这是如果你没有电脑也没有车，你可以测试Autoware

1345
01:59:22,488 --> 01:59:26,159
这是我们之前做过的的另一个训练活动

1346
01:59:26,159 --> 01:59:33,299
我们希望你们随身携带电脑自己安装Autoware和所需的一切

1347
01:59:33,299 --> 01:59:36,869
带上那些电脑进车里，在车内并测试你所学的东西

1348
01:59:38,804 --> 01:59:44,110
迄今为止，我们已经举办了许多与研究团体，学会，工业相关的活动

1349
01:59:44,110 --> 01:59:50,483
通过不同的工作坊，例如，DSP，APSIPA

1350
01:59:50,483 --> 01:59:55,054
在拉斯维加斯和巴黎和名古屋举行的国际会议上的研讨会

1351
01:59:55,054 --> 02:00:05,298
上个月在德国亚琛IV2022我们也举办了workshop介绍了Autoware

1352
02:00:05,298 --> 02:00:11,971
在2019年在中国兰州举办了Autoware workshop

1353
02:00:14,273 --> 02:00:16,983
现在我们又回到中国了

1354
02:00:16,976 --> 02:00:27,987
这次是由中国汽车技术研究中心（CATARC）组织举办这次精彩的活动

1355
02:00:27,987 --> 02:00:33,626
这次课程主要是介绍自动驾驶

1356
02:00:33,626 --> 02:00:41,834
我们非常被荣幸的是，Autoware被选作了这次培训的自动驾驶平台

1357
02:00:42,168 --> 02:00:47,807
这次的培训会在CATARC(中国汽车技术研究中心)举办

1358
02:00:47,807 --> 02:00:53,746
本次活动由三家公司一起合作举办

1359
02:00:53,746 --> 02:00:58,017
为大家提供这个Autoware的训练课程

1360
02:00:58,017 --> 02:01:01,153
三家分别是CATARC，TierIV和PIX moving

1361
02:01:01,754 --> 02:01:09,295
CATARC将提供的他们的设施，非常优秀的，有才能的工程师团队

1362
02:01:09,729 --> 02:01:16,636
以及位于天津的，非常卓越的研究设施

1363
02:01:17,003 --> 02:01:22,341
他们将提供一切相关的资源，努力为大家提供一个很棒的体验

1364
02:01:22,775 --> 02:01:27,246
不仅包括需要动手的实践课程

1365
02:01:27,246 --> 02:01:33,119
也会提供参加本次在线课程所需的所有资源

1366
02:01:33,753 --> 02:01:40,426
TierIV和Autoware Foundation将给大家来提供Autoware

1367
02:01:40,426 --> 02:01:46,732
而PIX moving给大家提供，本次课程中动手操作和使用到的车辆

1368
02:01:49,468 --> 02:01:55,541
那么让我们来总结一下，迄今为止

1369
02:01:55,541 --> 02:02:01,981
在社区里已经展开了很多关于自动驾驶的工作

1370
02:02:01,981 --> 02:02:06,852
真正的等级5的无人车已经快要实现了

1371
02:02:07,353 --> 02:02:13,626
实现这些还需要一些时间，因为驾驶行为是高难度的问题

1372
02:02:14,126 --> 02:02:23,502
我们需要深度的理解驾驶行为的各个方面，而且我们需要理解人类是怎样驾驶的

1373
02:02:23,502 --> 02:02:27,640
我们甚至要理解驾驶条件的心理机制的各个方面

1374
02:02:27,640 --> 02:02:31,610
来补偿当自动驾驶车辆融入社会时会引起的一些变化

1375
02:02:32,011 --> 02:02:35,681
当自动驾驶车辆行驶的时候，别的车可能还是人类在驾驶的

1376
02:02:36,682 --> 02:02:44,090
为了加速实现自动驾驶的这个过程，我们提出了开源的解决方式

1377
02:02:44,657 --> 02:02:54,667
这会使得社区进步，协同工作促使应用的普及加速

1378
02:02:54,667 --> 02:02:58,337
而更多的研究成果引入了先进技术

1379
02:02:58,337 --> 02:03:05,378
不同的自动驾驶方案平台，有不同的开源策略，比如Autoware和apollo

1380
02:03:05,378 --> 02:03:17,123
各有其长处和短处，可以根据硬件设施和你们制定的目标来进行选择

1381
02:03:17,456 --> 02:03:22,995
在这个领域，开放了许多机会，不仅是用来载人的车辆

1382
02:03:22,995 --> 02:03:27,666
物流，矿业，农业，以及机器人产业等多方面的领域

1383
02:03:28,234 --> 02:03:36,575
都可以从自动驾驶的软件里获益。所以，利用这个训练基地里所学的知识

1384
02:03:36,575 --> 02:03:43,015
去打造你们自己的商业，或者为你们的公司提供价值

1385
02:03:43,015 --> 02:03:48,654
也会给社会带来更多的发展。

1386
02:03:51,357 --> 02:03:56,629
在这个课程里我们会列出几个问题供你们思考

1387
02:03:58,164 --> 02:04:02,501
你们不需要回答我或者提交答案

1388
02:04:02,501 --> 02:04:05,404


1389
02:04:07,940 --> 02:04:14,480
只是为了帮助你们自己学习，请你们自己思考一下这些问题

1390
02:04:14,480 --> 02:04:18,717
并且去复习一下之前的资料，你们不需要回答给我

1391
02:04:19,051 --> 02:04:25,691
只是你们自己能够阐述这个问题就可以

1392
02:04:27,326 --> 02:04:34,033
第一个，在幻灯片第20页，我们提到了“在等级4，重新定义了ODD的范围”

1393
02:04:34,166 --> 02:04:37,686
我在课程中若干次提到了ODD

1394
02:04:37,670 --> 02:04:40,906
请问什么是ODD，以及列举几个ODD的具体例子

1395
02:04:42,141 --> 02:04:48,001
第二个问题，我们提到了Autoware和apollo的区别

1396
02:04:48,013 --> 02:04:53,185
以及为什么Autoware决定继续保留ROS，请解释两个平台的不同

1397
02:04:53,185 --> 02:05:00,960
并解释为什么Autoware还依赖ROS

1398
02:05:02,328 --> 02:05:07,399
第三个问题，请简要的介绍一下，为什么Autoware使用3D的激光雷达

1399
02:05:07,399 --> 02:05:10,269
以及为什么Autoware强烈了依赖3D的激光雷达

1400
02:05:10,269 --> 02:05:12,339
好的，以上就是我们准备的一些问题，你们可以去复习一下之前的资料

1401
02:05:13,706 --> 02:05:16,008


1402
02:05:16,008 --> 02:05:19,428


1403
02:05:19,411 --> 02:05:22,381
如果你们想不起正确的答案，请回去看一下之前的视频课程

1404
02:05:22,381 --> 02:05:25,531
看一下我们介绍的相应的地方

1405
02:05:27,219 --> 02:05:31,059
这就是这次课程的全部内容

1406
02:05:31,056 --> 02:05:34,326
首先，介绍了什么是自动驾驶

1407
02:05:34,360 --> 02:05:36,762


1408
02:05:36,762 --> 02:05:40,699
正如我们之前提到的，Day0 有两个部分，所以接下来我们要学习

1409
02:05:41,500 --> 02:05:44,703
传感器（sensor）的部分。

1410
02:05:45,137 --> 02:05:49,808
在Day1我们会正式开始学习Autoware

1411
02:05:50,409 --> 02:06:00,629
然后我们会开始学习安装Autoware，进行一些初步的操作。

1412
02:06:02,454 --> 02:06:07,826
然后在Day2，我们开始理解怎样生成地图

1413
02:06:07,826 --> 02:06:13,399
3D地图， HD地图（高清地图），以及自我定位的概念

1414
02:06:14,633 --> 02:06:19,338
Day3，我们开始介绍物体识别

1415
02:06:19,672 --> 02:06:24,510
还有一些关于传感器的讨论，物体识别几种不同的算法

1416
02:06:24,910 --> 02:06:29,882
以及在Autoware里是怎样实现的，还有轨迹追踪的基本概念

1417
02:06:30,282 --> 02:06:34,072
轨迹追踪的基本算法，和在Autoware里怎样实现的

1418
02:06:34,653 --> 02:06:39,992
Day4，我们会学习路径生成，路径规划，车辆控制

1419
02:06:40,626 --> 02:06:47,099
然后最后一天的Day5，我们会讲解，自动驾驶中的决策

1420
02:06:47,299 --> 02:06:51,904
驾驶模拟器，以及Autoware的未来

1421
02:06:52,504 --> 02:06:57,743
非常感谢大家！请大家一定要享受这个培训课程。
